@page
@model ArmisWebsite.ProcessListingModel
@{
    ViewData["Title"] = "ProcessListing";
}

<head>
    <link href="~/lib/fontawesome-free-5.12.0-web/css/all.min.css" rel="stylesheet" />
    <script type="text/javascript" src="~/js/Quality/Process/ProcessListing.js"></script>
</head>

<div class="container-fluid w-75">
    <h1 class="my-2">Process Listing</h1>

    @*Pop up message*@
    <partial name="/Pages/shared/partials/popupmessagepartial.cshtml" model="Model.Message" />
    
    @if (Model.PdfPath != null)
    {
        <div class="my-3">
            <span class="alert alert-success">
                Your PDF was created at:
                <span id="pdfPath">@Model.PdfPath</span>
                <button id="btnOpenPdf" onclick="openPdfInNewTab()">Open</button>
            </span>
        </div>
    }

    <div id="stepList">
        <div class="row">
            <div class="col-lg-7">
                @*Search bar*@
                <div class="input-group my-1">
                    <input id="searchProcesses" class="form-control border-right-0" placeholder="Search..." onkeyup="searchProcessList()" />
                    <span class="input-group-append bg-white border-left-0">
                        <span class="input-group-text bg-transparent"><i class="fa fa-search"></i></span>
                    </span>
                </div>
                @*Process list*@
                <form method="post">
                    <select id="processList" class="list-group w-100" asp-for="ProcessIdSelection" size="12" style="overflow:scroll;">
                        @foreach (var process in Model.Processes)
                        {
                            <option class="list-group-item" id="process-@process.ProcessId" value="@process.ProcessId" onmousedown="loadSteps(@process.ProcessId, '@process.Name'); togglePrintButton()">
                                @process.ProcessId: @process.Name
                                (Rev:
                                @if (process.Revisions != null && process.Revisions.Any() && process.Revisions.FirstOrDefault(i => i.RevStatusId == 1) != null) //1 = LOCKED
                                {
                                    @process.Revisions.FirstOrDefault(i => i.RevStatusId == 1).ProcessRevId //1 = LOCKED
                                }
                                else
                                {
                                    <p>No Locked Revs</p> @*tags aren't supposed to be in the <option> tag, so it doesn't actually render the <p> tag, but it is the only way to escape the c# code.*@
                                })
                            </option>
                        }
                    </select>
                    <button id="btnPrint" class="btn btn-primary my-1" asp-page-handler="Print" disabled>Print</button>
                </form>

            </div>
            @*This is where the steps will be loaded*@
            <div class="col-lg-5">
                <h5 id="stepTitle"></h5>
                <ul id="stepsPlaceholder" class="list-group" style="max-height:36em; overflow:scroll;">
                </ul>
            </div>

        </div>
    </div>


</div>
<script>
    //TODO:This is the same code that is in Process Rev Maintenance. See if this can be put into its own file and pulled into each of these htmls.
    function loadSteps(aProcessId, aProcessName) {
        if (aProcessId > 0) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '@Model._apiAddress' + 'api/processes/GetProcessCurrentHydratedRev/' + aProcessId, true);
            xhr.send();

            xhr.onload = function () {

                var rev = JSON.parse(xhr.responseText);
                var ulStepPlaceHolder = document.getElementById("stepsPlaceholder");
                ulStepPlaceHolder.innerHTML = "";
                if (xhr.status != 404) {
                    if (rev.StepSeqs.length > 0) {
                        for (var i = 0; i < rev.StepSeqs.length; i++) {

                            var pSignOffReqHtml = document.createElement("p");
                            pSignOffReqHtml.classList = "text-danger";
                            if (rev.StepSeqs[i].Step.SignOffIsRequired == true) {
                                pSignOffReqHtml.innerHTML = 'Sign-Off Required';
                            }
                            var pStepInstructions = document.createElement("p");
                            pStepInstructions.innerHTML = rev.StepSeqs[i].Step.Instructions;

                            var divInstructionsCard = document.createElement("div");
                            divInstructionsCard.classList = "card card-body";
                            divInstructionsCard.appendChild(pSignOffReqHtml);
                            divInstructionsCard.appendChild(pStepInstructions);

                            var divStepCollapse = document.createElement("div");
                            divStepCollapse.id = "stepItem" + i;
                            divStepCollapse.classList = "collapse";
                            divStepCollapse.appendChild(divInstructionsCard);

                            var iArrow = document.createElement("i");
                            iArrow.classList = "fa fa-chevron-down rotate";
                            iArrow.style = "color:#0366d6;";

                            var aStepName = document.createElement("a")
                            aStepName.dataset.toggle = "collapse";
                            aStepName.href = "#stepItem" + i;
                            aStepName.innerHTML = rev.StepSeqs[i].Step.StepName + " [" + rev.StepSeqs[i].Operation.OperShortName + "] ";
                            aStepName.appendChild(iArrow);

                            var liStep = document.createElement("li");
                            liStep.classList = "list-group-item";
                            liStep.appendChild(aStepName);
                            liStep.appendChild(divStepCollapse);

                            ulStepPlaceHolder.appendChild(liStep);
                        };
                    }
                    else {
                        var liStep = document.createElement("li");
                        liStep.classList = "list-group-item";
                        liStep.innerHTML = 'There are no steps in the current revision.'
                        ulStepPlaceHolder.appendChild(liStep)
                    }

                }
                else {
                    console.log('There are no revisions for this process.');
                }
                document.getElementById("stepsPlaceholder").appendChild(liStep);
                document.getElementById("stepTitle").innerHTML = aProcessName.toString();

                activateRotate(); //Turns on the arrows rotating.  Need to be called every single time to apply it to the newly generated list of steps.
            }
        }
    }
    function activateRotate() {
        //Little script to flip the arrow icon when collapsing/uncollapsing
        $(".collapse").on('show.bs.collapse', function () {
            var iconElement = this.parentNode.getElementsByClassName("fa-chevron-down")[0]; //There is only one icon that is a chevron per li.
            $(iconElement).toggleClass('down');
        });
        $(".collapse").on('hide.bs.collapse', function () {
            var iconElement = this.parentNode.getElementsByClassName("fa-chevron-down")[0]; //There is only one icon that is a chevron per li.
            $(iconElement).toggleClass('down');
        });
    }
</script>