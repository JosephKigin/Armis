@page
@model ArmisWebsite.Pages.Quality.Specification.SpecProcessAssignListingModel
@{
    ViewData["Title"] = "SpecProcessAssignListing";
}
<div class="container-fluid w-75">
    <h1>Specification-Process Assignment Listing</h1>

    <div class="input-group my-1">
        @*Search by... Filter needs to be added.*@
        <input id="inputStepSearchFilter" type="text" class="form-control border-right-0" placeholder="Search By Specification Code..." onkeyup="searchSpecProcessAssignList(this.value)" />
        <span class="input-group-append bg-white border-left-0">
            <span class="input-group-text bg-transparent"><i class="fa fa-search"></i></span>
        </span>
    </div>

    <ul id="allAssignsList" class="list-group" style="height:42em; overflow-y:scroll">
        @{
            var allSpecIds = new List<int>();

            foreach (var specProcessAssign in Model.AllSpecProcessAssigns)
            {
                if (!allSpecIds.Contains(specProcessAssign.SpecId))
                { allSpecIds.Add(specProcessAssign.SpecId); }
            }
        }

        @foreach (var specId in allSpecIds)
        {
            var allSpasForSpecId = Model.AllSpecProcessAssigns.Where(i => i.SpecId == specId);
            var spec = allSpasForSpecId.FirstOrDefault().SpecificationRevision; //This is used in order to get the specification information for the "header" section.

            <li class="list-group-item" data-spec="@spec.SpecCode">
                <a data-toggle="collapse" href="#specGroup_@spec.SpecId">
                    @spec.SpecId.
                    Specification: <b>@spec.SpecCode</b>
                    Rev: <b>@spec.ExternalRev </b>
                    <i class="fa fa-chevron-down rotate"></i>
                </a>

                @foreach (var specProcessAssign in allSpasForSpecId)
                {
                    <div id="specGroup_@specProcessAssign.SpecId" class="collapse">
                        <div>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            @if (specProcessAssign.SpecProcessAssignOptionModels != null)
                            {
                                <a data-toggle="collapse" href="#specProcAssign_@specProcessAssign.SpecId-@specProcessAssign.SpecRevId-@specProcessAssign.SpecAssignId">
                                    @specProcessAssign.SpecAssignId.
                                    Process: <b>@specProcessAssign.ProcessRevision.ProcessId. @specProcessAssign.ProcessRevision.ProcessName</b>
                                    Rev: <b>@specProcessAssign.ProcessRevId </b>
                                    <i class="fa fa-chevron-down rotate"></i>
                                </a>
                                <div id="specProcAssign_@specProcessAssign.SpecId-@specProcessAssign.SpecRevId-@specProcessAssign.SpecAssignId" class="row collapse">
                                    <partial name="/Pages/Quality/Specification/Partials/SpecProcessAssignTablePartial.cshtml" model="specProcessAssign" />
                                </div>
                            }
                            else
                            {
                                @specProcessAssign.SpecAssignId
                                <text>. Process:</text> <b>@specProcessAssign.ProcessRevision.ProcessId. @specProcessAssign.ProcessRevision.ProcessName</b>
                                <text>Rev:</text> <b>@specProcessAssign.ProcessRevId</b>
                            }

                        </div>
                    </div>
                }
            </li>
        }
    </ul>
</div>

<script>
    function searchSpecProcessAssignList(searchTerm) {
        var assigns = document.getElementById("allAssignsList").getElementsByTagName("li");
        for (var i = 0; i < assigns.length; i++) {
            if (assigns[i] != undefined) {
                if (assigns[i].dataset.spec.toLowerCase().includes(searchTerm.toLowerCase())) {
                    console.log(assigns[i].dataset.spec.toLowerCase() + " : " + searchTerm);
                    assigns[i].style.display = "block";
                }
                else {
                    assigns[i].style.display = "none";
                }
            }
        }
    }

    $(document).ready(function () { activateRotate() }); //Turns the rotate on as soon as the document is loaded.

    //This needs to be in a seperate function so that "function addToCurrentSteps(aStepId)" can call it after adding a new element, otherwise that element won't have the rotation activated for it.
    function activateRotate() {
        //Little script to flip the arrow icon when collapsing/uncollapsing
        $(".collapse").on('show.bs.collapse', function (e) {
            console.log("Show: " + this.id);
            e.stopPropagation();
            var iconElement = this.parentNode.getElementsByClassName("fa-chevron-down")[0]; //There is only one icon that is a chevron per li.
            $(iconElement).toggleClass('down');
        });
        $(".collapse").on('hide.bs.collapse', function (e) {
            console.log("Hide: " + this.id);
            e.stopPropagation();
            var iconElement = this.parentNode.getElementsByClassName("fa-chevron-down")[0]; //There is only one icon that is a chevron per li.
            $(iconElement).toggleClass('down');
        });
    }
</script>