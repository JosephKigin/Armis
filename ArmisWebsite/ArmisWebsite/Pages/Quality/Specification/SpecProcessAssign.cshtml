@page "{aSpecId:int?}/{aMessage?}/{isMessageGood:bool?}"
@model ArmisWebsite.Pages.ProcessMaintenance.SpecProcessAssignmentModel
@{
    ViewData["Title"] = "SpecProcessAssign";
}

<head>
    <script type="text/javascript" src="~/js/Quality/Specification/SpecProcessAssign.js"></script>

    @if (Model.CurrentSpec == null)
    {
        <script type="text/javascript">
            //Opens Spec model when the page loads
            $(window).on('load', function () {
                $('#modalSpecificationSelect').modal('show');
            });
        </script>
    }

    @if (Model.IsReviewNeededForCurrentSpec)
    {
        <script type="text/javascript">
            $(window).on('load', function () {
                this.document.getElementById("isReviewNeededWarningMessage").hidden = false;
                this.document.getElementById("btnSubmitMainForm").disabled = true;
            });
        </script>
    }
</head>

<div class="container-fluid w-100">
    <h1>Specification-Process Assignment</h1>

    @*Preloaded message.*@
    <p><partial name="/Pages/shared/partials/popupmessagepartial.cshtml" model="Model.Message" /></p>

    @*This message will show up if the current spec selected has spec-process assignments that need to be reviewed.*@
    <div id="isReviewNeededWarningMessage" hidden>
        <div class="row alert alert-danger">
            <h5 class="col-lg-10">This Specification has Spec-Process Assignments that need review</h5> 
            <a asp-page="SpecProcessAssignReview" class="btn btn-primary col-lg-2">Go To Review</a>
        </div>
    </div>

    <form method="post" onsubmit="return validate()">
        <div class="row">
            @*Left Side*@
            <div class="col-lg-3">
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modalSpecificationSelect">Find Specification</button>

                <div class="modal fade" id="modalSpecificationSelect">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Choose a Specification</h5>
                            </div>
                            <div class="modal-body">
                                <input class="form-control mb-1" placeholder="Search..." onkeyup="searchSelectList(this.value, 'Specification')" />
                                <select id="selectSpecificationList" class="list-group w-100" size="14">
                                    @foreach (var spec in Model.AllSpecifications)
                                    {
                                        <option class="list-group-item" data-id="@spec.Id" value="@spec.Code" onmousedown="udpateSpecIdOnAnchor(@spec.Id)">
                                            @spec.Code
                                        </option>
                                    }
                                </select>
                                <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                <a id="ancSpecChoiceCommit" class="btn btn-primary my-2" href="">Ok</a>
                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.CurrentSpec != null)
                {
                    <br />
                    <label>Spec Code</label>
                    <input class="form-control mb-2" value="@Model.CurrentSpec.Code" readonly />
                    <label>Spec Rev</label>
                    <input class="form-control mb-2" value="@Model.CurrentSpecCurrentRev.ExternalRev" readonly />

                    <input type="hidden" asp-for="SpecId" />
                    <input type="hidden" asp-for="SpecInternalRevId" />

                    <div class="card p-2">
                        @foreach (var sublevel in Model.CurrentSpecCurrentRev.SubLevels)
                        {
                            <div class="border border-light p-1">
                                <h5>@sublevel.Name</h5>
                                @foreach (var choice in sublevel.Choices)
                                {
                                    <div><input type="checkbox" name="@sublevel.Name" value="@choice.ChoiceSeq" onchange="updateChoiceIdInput(@sublevel.LevelSeq, this)" /> @choice.Name</div>
                                }
                            </div>
                        }
                        <input type="hidden" id="hdnChoiceId1" asp-for="ChoiceId1" />
                        <input type="hidden" id="hdnChoiceId2" asp-for="ChoiceId2" />
                        <input type="hidden" id="hdnChoiceId3" asp-for="ChoiceId3" />
                        <input type="hidden" id="hdnChoiceId4" asp-for="ChoiceId4" />
                        <input type="hidden" id="hdnChoiceId5" asp-for="ChoiceId5" />
                        <input type="hidden" id="hdnChoiceId6" asp-for="ChoiceId6" />
                    </div>
                }

            </div>
            @if (Model.CurrentSpec != null)
            {
                @*Middle*@
                <div class="col-lg-4">
                    @*Pre-Bake*@
                    <div class="mb-2 border border-dark p-2">
                        <label>Pre-Bake: </label> <label id="labelPreBake"></label>
                        <button type="button" class="btn btn-sm btn-primary float-right mb-1" data-toggle="modal" data-target="#modalPreBakeSelect">Find</button>
                        <button type="button" class="btn btn-sm btn-danger float-right  mb-1 mx-1" onclick="clearInput('PreBake')">Clear</button>

                        <input type="hidden" id="hdnPreBakeId" asp-for="PreBakeStepId" />

                        @*@if (Model.PreBakeStepId != null)
                            {<input id="inputPreBake" class="form-control" data-id="@Model.PreBakeStepId" value="@Model.AllBakeSteps.FirstOrDefault(i => i.StepId == Model.PreBakeStepId).StepName" readonly /> }
                            else
                            { <input id="inputPreBake" class="form-control" data-id="" value="" readonly />}*@
                    </div>

                    <div class="modal fade" id="modalPreBakeSelect">
                        <div class="modal-dialog modal-xl">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Choose a Pre-Bake</h5>
                                </div>
                                <div class="modal-body">
                                    <input class="form-control mb-1" placeholder="Search..." onkeyup="searchSelectList(this.value, 'PreBake')" />
                                    <select id="selectPreBakeList" class="list-group w-100" size="10">
                                        @foreach (var bake in Model.AllBakeSteps)
                                        {
                                            <option class="list-group-item border-dark" data-id="@bake.StepId" value="@bake.StepId. @bake.StepName" style="white-space:normal">
                                                @bake.StepId.
                                                @bake.StepName -
                                                @bake.Instructions
                                            </option>
                                        }
                                    </select>
                                    <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                    <button type="button" class="btn btn-primary my-2" data-dismiss="modal" onclick="updateInputFromSelectModal('PreBake')">Ok</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Post Bake*@
                    <div class="mb-2 border border-dark p-2">
                        <label>Post-Bake:</label><label id="labelPostBake"></label>
                        <button type="button" class="btn btn-sm btn-primary float-right" data-toggle="modal" data-target="#modalPostBakeSelect">Find</button>
                        <button type="button" class="btn btn-sm btn-danger float-right mb-1 mx-1" onclick="clearInput('PostBake')">Clear</button>

                        <input type="hidden" id="hdnPostBakeId" asp-for="PostBakeStepId" />

                        @*@if (Model.PostBakeStepId != null)
                            {<input id="inputPostBake" class="form-control" data-id="@Model.PostBakeStepId" value="@Model.AllBakeSteps.FirstOrDefault(i => i.StepId == Model.PostBakeStepId).StepName" readonly /> }
                            else
                            { <input id="inputPostBake" class="form-control" data-id="" value="" readonly />}*@
                    </div>

                    <div class="modal fade" id="modalPostBakeSelect">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Choose a Post-Bake</h5>
                                </div>
                                <div class="modal-body">
                                    <input class="form-control mb-1" placeholder="Search..." onkeyup="searchSelectList(this.value, 'PostBake')" />
                                    <select id="selectPostBakeList" class="list-group w-100" size="16">
                                        @foreach (var bake in Model.AllBakeSteps)
                                        {
                                            <option class="list-group-item" data-id="@bake.StepId" value="@bake.StepId. @bake.StepName">
                                                @bake.StepId.
                                                @bake.StepName -
                                                @bake.Instructions
                                            </option>
                                        }
                                    </select>
                                    <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                    <button type="button" class="btn btn-primary my-2" data-dismiss="modal" onclick="updateInputFromSelectModal('PostBake')">Ok</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Mask*@
                    <div class="mb-2 border border-dark p-2">
                        <label>Mask:</label><label id="labelMask"></label>
                        <button type="button" class="btn btn-sm btn-primary float-right" data-toggle="modal" data-target="#modalMaskSelect">Find</button><button type="button" class="btn btn-sm btn-danger float-right mb-1 mx-1" onclick="clearInput('Mask')">Clear</button>

                        <input type="hidden" id="hdnMaskId" asp-for="MaskStepId" />

                        @*@if (Model.MaskStepId != null)
                            {<input id="inputMask" data-id="@Model.MaskStepId" class="form-control" value="@Model.AllMaskSteps.FirstOrDefault(i => i.StepId == Model.MaskStepId).StepName" readonly /> }
                            else
                            { <input id="inputMask" data-id="" class="form-control" value="" readonly />}*@

                    </div>

                    <div class="modal fade" id="modalMaskSelect">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Choose a Mask</h5>
                                </div>
                                <div class="modal-body">
                                    <input class="form-control mb-1" placeholder="Search..." onkeyup="searchSelectList(this.value, 'Mask')" />
                                    <select id="selectMaskList" class="list-group w-100" size="16">
                                        @foreach (var mask in Model.AllMaskSteps)
                                        {
                                            <option class="list-group-item" data-id="@mask.StepId" value="@mask.StepId. @mask.StepName">
                                                @mask.StepId.
                                                @mask.StepName
                                            </option>
                                        }
                                    </select>
                                    <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                    <button type="button" class="btn btn-primary my-2" data-dismiss="modal" onclick="updateInputFromSelectModal('Mask')">Ok</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Hardness*@
                    <div class="mb-2 border border-dark p-2">
                        <label>Hardness:</label> <label id="labelHardness"></label>
                        <button type="button" class="btn btn-sm btn-primary float-right" data-toggle="modal" data-target="#modalHardnessSelect">Find</button><button type="button" class="btn btn-sm btn-danger float-right mb-1 mx-1" onclick="clearInput('Hardness')">Clear</button>

                        <input type="hidden" id="hdnHardnessId" asp-for="HardnessId" />

                        @*@if (Model.HardnessId != null)
                            {<input id="inputHardness" class="form-control" data-id="@Model.HardnessId" value="@Model.AllHardnesses.FirstOrDefault(i => i.HardnessId == Model.HardnessId).ShortName" readonly /> }
                            else
                            { <input id="inputHardness" data-id="" class="form-control" value="" readonly />}*@
                    </div>

                    <div class="modal fade" id="modalHardnessSelect">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Choose a Hardness</h5>
                                </div>
                                <div class="modal-body">
                                    <input class="form-control mb-1" placeholder="Search..." onkeyup="searchSelectList(this.value, 'Hardness')" />
                                    <select id="selectHardnessList" class="list-group w-100" size="16">
                                        @foreach (var hardness in Model.AllHardnesses)
                                        {
                                            <option class="list-group-item" data-id="@hardness.HardnessId" value="@hardness.HardnessId. @hardness.ShortName">
                                                @hardness.HardnessId.
                                                @hardness.ShortName -
                                                @hardness.Description
                                            </option>
                                        }
                                    </select>
                                    <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                    <button type="button" class="btn btn-primary my-2" data-dismiss="modal" onclick="updateInputFromSelectModal('Hardness')">Ok</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Series*@
                    <div class="mb-2 border border-dark p-2">
                        <label>Series:</label><label id="labelMaterialSeries"></label>
                        <button type="button" class="btn btn-sm btn-primary float-right" data-toggle="modal" data-target="#modalMaterialSeriesSelect">Find</button><button type="button" class="btn btn-sm btn-danger float-right mb-1 mx-1" onclick="clearInput('MaterialSeries')">Clear</button>

                        <input type="hidden" id="hdnMaterialSeriesId" asp-for="MaterialSeriesId" />

                        @*@if (Model.MaterialSeriesId != null)
                            {<input id="inputMaterialSeries" class="form-control" data-id="@Model.MaterialSeriesId" value="@Model.AllMaterialSeries.FirstOrDefault(i => i.SeriesId == Model.MaterialSeriesId).Description" readonly /> }
                            else
                            { <input id="inputMaterialSeries" data-id="" class="form-control" value="" readonly />}*@

                    </div>

                    <div class="modal fade" id="modalMaterialSeriesSelect">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Choose a Material Series</h5>
                                </div>
                                <div class="modal-body">
                                    <input class="form-control mb-1" placeholder="Search..." onkeyup="searchSelectList(this.value, 'MaterialSeries')" />
                                    <select id="selectMaterialSeriesList" class="list-group w-100" size="16">
                                        @foreach (var series in Model.AllMaterialSeries)
                                        {
                                            <option class="list-group-item" data-id="@series.SeriesId" value="@series.SeriesId. @series.Description">
                                                @series.SeriesId.
                                                @series.ShortName -
                                                @series.Description
                                            </option>
                                        }
                                    </select>
                                    <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                    <button type="button" class="btn btn-primary my-2" data-dismiss="modal" onclick="updateInputFromSelectModal('MaterialSeries')">Ok</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Alloy*@
                    <div class="mb-2 border border-dark p-2">
                        <label>Alloy:</label><label id="labelMaterialAlloy"></label>
                        <button type="button" class="btn btn-sm btn-primary float-right" data-toggle="modal" data-target="#modalMaterialAlloySelect">Find</button><button type="button" class="btn btn-sm btn-danger float-right mb-1 mx-1" onclick="clearInput('MaterialAlloy')">Clear</button>

                        <input type="hidden" id="hdnMaterialAlloyId" asp-for="MaterialAlloyId" />

                        @*@if (Model.MaterialAlloyId != null)
                            {<input id="inputMaterialAlloy" class="form-control" data-id="@Model.MaterialAlloyId" value="@Model.AllMaterialAlloys.FirstOrDefault(i => i.AlloyId == Model.MaterialAlloyId).Description" readonly /> }
                            else
                            { <input id="inputMaterialAlloy" class="form-control" data-id="" readonly />}*@

                    </div>

                    <div class="modal fade" id="modalMaterialAlloySelect">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Choose a Material Series</h5>
                                </div>
                                <div class="modal-body">
                                    <input class="form-control mb-1" placeholder="Search..." onkeyup="searchSelectList(this.value, 'MaterialAlloy')" />
                                    <select id="selectMaterialAlloyList" class="list-group w-100" size="16">
                                        @foreach (var alloy in Model.AllMaterialAlloys)
                                        {
                                            <option class="list-group-item" data-id="@alloy.AlloyId" value="@alloy.SeriesId. @alloy.Description">
                                                @alloy.SeriesId.
                                                @alloy.Description
                                            </option>
                                        }
                                    </select>
                                    <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                    <button type="button" class="btn btn-primary my-2" data-dismiss="modal" onclick="updateInputFromSelectModal('MaterialAlloy')">Ok</button>
                                </div>
                            </div>7
                        </div>
                    </div>


                    @*Customer*@
                    <div class=" border border-dark p-2">
                        <label>Customer:</label> <label id="labelCustomer"></label>
                        <button type="button" class="btn btn-sm btn-primary float-right" data-toggle="modal" data-target="#modalCustomerSelect">Find</button><button type="button" class="btn btn-sm btn-danger float-right mb-1 mx-1" onclick="clearInput('Customer')">Clear</button>

                        <input type="hidden" id="hdnCustomerId" asp-for="CustomerId" />

                        @*@if (Model.CustomerId != null)
                            {<input id="inputCustomer" class="form-control" data-id="@Model.CustomerId" value="@Model.AllCustomers.FirstOrDefault(i => i.CustId == Model.CustomerId).Name" readonly /> }
                            else
                            { <input id="inputCustomer" class="form-control" data-id="" readonly />}*@
                    </div>

                    <div class="modal fade" id="modalCustomerSelect">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Choose a Customer</h5>
                                </div>
                                <div class="modal-body">
                                    <input class="form-control mb-1" placeholder="Search..." onkeyup="searchSelectList(this.value, 'Customer')" />
                                    <select id="selectCustomerList" class="list-group w-100" size="16">
                                        @foreach (var customer in Model.AllCustomers)
                                        {
                                            <option class="list-group-item" data-id="@customer.CustId" value="@customer.CustId. @customer.Name">
                                                @customer.CustId.
                                                @customer.SearchName -
                                                @customer.Name
                                            </option>
                                        }
                                    </select>
                                    <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                    <button type="button" class="btn btn-primary my-2" data-dismiss="modal" onclick="updateInputFromSelectModal('Customer')">Ok</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Process Selection Modal Goes here*@
                    <div class="my-5">
                        <span id="processValidateAlert" class="text-danger align-self-center" hidden>Please select a process</span>
                        <div id="selectProcessSection" class="border border-dark p-2">
                            <label>Process: </label>
                            <br />
                            <label id="labelProcess" class="font-weight-bold"></label>
                            <br />
                            <div class="text-center"><button type="button" class="btn btn-primary " data-toggle="modal" data-target="#modalProcessSelect">Search Process</button></div>

                            <input type="hidden" id="hdnProcessId" asp-for="ProcessId" value="" />
                            <input type="hidden" id="hdnProcessRevId" asp-for="ProcessRevId" />
                        </div>
                    </div>
                    <div class="modal fade" id="modalProcessSelect">
                        <div class="modal-dialog modal-xl">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Choose a Process To Edit</h5>
                                </div>
                                <div class="modal-body">
                                    <div class="row">
                                        <div class="col-lg-8">
                                            <div class="input-group my-1">
                                                <input id="inputProcessSearchFilter" type="text" class="form-control border-right-0" placeholder="Search..." onkeyup="searchProcessList(this.value)" />
                                                <span class="input-group-append bg-white border-left-0">
                                                    <span class="input-group-text bg-transparent"><i class="fa fa-search"></i></span>
                                                </span>
                                            </div>
                                            <select id="selectProcessList" class="list-group w-100" size="12" onchange="updateProcessRevIdInput(this.options[this.selectedIndex].dataset.currentRevId)">
                                                @foreach (var process in Model.AllProcessesWithCurrentRev)
                                                {

                                                    var currentRevId = process.Revisions.OrderByDescending(i => i.ProcessRevId).FirstOrDefault().ProcessRevId;

                                                    <option value="@process.ProcessId. @process.Name" class="list-group-item fa" data-id="@process.ProcessId" data-current-rev-id="@currentRevId" onmouseup="LoadStepModal(@process.ProcessId, `@process.Name`)">
                                                        @process.ProcessId: @process.Name -
                                                        Rev:
                                                        @if (process.Revisions != null && process.Revisions.Any())
                                                        {
                                                            @process.Revisions.Last().ProcessRevId
                                                        }
                                                        else
                                                        {
                                                            <text>NONE</text>
                                                        }
                                                    </option>
                                                }
                                            </select>
                                            <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                            <input type="button" class="btn btn-primary my-2" data-dismiss="modal" onclick="updateInputFromSelectModal('Process')" value="Ok" />
                                        </div>
                                        <div class="col-lg-4">
                                            <h5 id="modalStepTitle"></h5>
                                            <ul id="modalStepPlaceholder" class="list-group" style="max-height:29em; overflow-y:scroll;">
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Right side*@
                <div class="col-lg-5">
                    <h5 class="justify-content-center">Current Spec-Process Assignments</h5>
                    <div class="input-group my-1">
                        <input id="inputStepSearchFilter" type="text" class="form-control border-right-0" placeholder="Search..." onkeyup="searchCurrentSpaList(this.value)" />
                        <span class="input-group-append bg-white border-left-0">
                            <span class="input-group-text bg-transparent"><i class="fa fa-search"></i></span>
                        </span>
                    </div>
                    <ul id="spaList" class="list-group w-100 border" style="overflow-y:scroll; height:40em;">
                        @if (Model.SpecProcessAssignsForCurrentSpec != null)
                        {
                            @foreach (var specProcessAssign in Model.SpecProcessAssignsForCurrentSpec)
                            {
                                <li class="list-group-item" data-process="@specProcessAssign.ProcessRevision.ProcessName">
                                    <a data-toggle="collapse" href="#specProcAssign_@specProcessAssign.SpecId-@specProcessAssign.SpecRevId-@specProcessAssign.SpecAssignId">
                                        @specProcessAssign.SpecAssignId.
                                        Process: <b>@specProcessAssign.ProcessRevision.ProcessName</b>
                                        Rev: <b>@specProcessAssign.ProcessRevId</b>
                                    </a>

                                    <div id="specProcAssign_@specProcessAssign.SpecId-@specProcessAssign.SpecRevId-@specProcessAssign.SpecAssignId" class="row collapse">
                                        Customer: &nbsp;
                                        @if (specProcessAssign.Customer != null)
                                        {<b>@specProcessAssign.Customer.Name</b>}
                                        else { <text>NONE</text>}
                                        <table class="table table-bordered table-striped table-hover">
                                            <tr>
                                                <th class="text-center" style="border-bottom-color:black">Sublevel 1</th>
                                                <th class="text-center" style="border-bottom-color:black">Sublevel 2</th>
                                                <th class="text-center" style="border-bottom-color:black">Sublevel 3</th>
                                                <th class="text-center" style="border-bottom-color:black">Sublevel 4</th>
                                            </tr>

                                            <tr>
                                                <td class="text-center">
                                                    @if (specProcessAssign.Choice1 != null && specProcessAssign.Choice1.Name != null)
                                                    {@specProcessAssign.Choice1.Name}
                                                </td>

                                                <td class="text-center">
                                                    @if (specProcessAssign.Choice2 != null && specProcessAssign.Choice2.Name != null)
                                                    {@specProcessAssign.Choice2.Name}
                                                </td>

                                                <td class="text-center">
                                                    @if (specProcessAssign.Choice3 != null && specProcessAssign.Choice3.Name != null)
                                                    {@specProcessAssign.Choice3.Name}
                                                </td>

                                                <td class="text-center">
                                                    @if (specProcessAssign.Choice4 != null && specProcessAssign.Choice4.Name != null)
                                                    {@specProcessAssign.Choice4.Name}
                                                </td>
                                            </tr>
                                        </table>

                                        <table class="table table-bordered table-striped table-hover">
                                            <tr>
                                                <th class="text-center" style="border-bottom-color:black; width:16.6%;">Pre-Bake</th>
                                                <th class="text-center" style="border-bottom-color:black; width:16.6%;">Post-Bake</th>
                                                <th class="text-center" style="border-bottom-color:black; width:16.6%;">Mask</th>
                                                <th class="text-center" style="border-bottom-color:black; width:16.6%;">Hardness</th>
                                                <th class="text-center" style="border-bottom-color:black; width:16.6%;">Series</th>
                                                <th class="text-center" style="border-bottom-color:black; width:16.6%;">Alloy</th>
                                            </tr>

                                            <tr>
                                                <td class="text-center">
                                                    @if (specProcessAssign.PreBakeOption != null && specProcessAssign.PreBakeOption.StepName != null)
                                                    {@specProcessAssign.PreBakeOption.StepName}
                                                </td>

                                                <td class="text-center">
                                                    @if (specProcessAssign.PostBakeOption != null && specProcessAssign.PostBakeOption.StepName != null)
                                                    {@specProcessAssign.PostBakeOption.StepName}
                                                </td>

                                                <td class="text-center">
                                                    @if (specProcessAssign.MaskOption != null && specProcessAssign.MaskOption.StepName != null)
                                                    {@specProcessAssign.MaskOption.StepName}
                                                </td>

                                                <td class="text-center">
                                                    @if (specProcessAssign.HardnessOption != null && specProcessAssign.HardnessOption.ShortName != null)
                                                    {@specProcessAssign.HardnessOption.ShortName}
                                                </td>

                                                <td class="text-center">
                                                    @if (specProcessAssign.SeriesOption != null && specProcessAssign.SeriesOption.ShortName != null)
                                                    {@specProcessAssign.SeriesOption.ShortName}
                                                </td>


                                                <td class="text-center">
                                                    @if (specProcessAssign.AlloyOption != null && specProcessAssign.AlloyOption.Description != null)
                                                    {@specProcessAssign.AlloyOption.Description}
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item">
                                No Spec-Process Assignments for this Specification
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
        @if (Model.CurrentSpec != null)
        {
            <div class="row">
                <div class="col-lg-3"><a class="btn btn-lg btn-danger mt-3" href="/Quality/Specification/SpecProcessAssign/"><h4>Reset</h4></a></div> @**@
                <div class="col-lg-5"></div>
                <div class="col-lg-4"><button id="btnSubmitMainForm" type="submit" class="btn btn-lg btn-primary mt-3 float-right"><h4>Submit</h4></button></div>
            </div>
        }
    </form>
</div>

<script>
    //This will get all the steps for a process and load them into the process select modal dynamically.  When a process is clicked, the steps are loaded.
    //This needs to be in the HTML so it has access to some information needed from the model
    function LoadStepModal(aProcessId, aProcessName) {
        if (aProcessId > 0) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '@Model._apiAddress' + 'api/processes/GetHydratedProcessRevision/' + aProcessId, true)
            xhr.send();

            xhr.onload = function () {
                var rev = JSON.parse(xhr.responseText);
                var stepItemsHtml = '';
                if (xhr.status == 200) {
                    for (var i = 0; i < rev.StepSeqs.length; i++) {
                        var signOffReqHtml = '';
                        if (rev.StepSeqs[i].Step.SignOffIsRequired == true) {
                            signOffReqHtml = `<p class="text-danger">Sign-Off Required</p>`;
                        }
                        stepItemsHtml +=

                            `<li class="list-group-item">
                                                <a data-toggle="collapse" href="#stepItem` + i + `">` + (i + 1) + ': ' + rev.StepSeqs[i].Step.StepName + `</a>
                                                <div id="stepItem` + i + `" class="collapse">
                                                    <div class="card card-body">`+
                            signOffReqHtml +
                            `<p>` + rev.StepSeqs[i].Step.Instructions + `</p>
                                                    </div>
                                                </div>
                                            </li>`
                    };
                }
                else {
                    stepItemsHtml = 'There are no steps for this process.';
                }

                document.getElementById("modalStepPlaceholder").innerHTML = stepItemsHtml;
                document.getElementById("modalStepTitle").innerHTML = 'Steps for ' + aProcessName.toString();
                document.getElementById("ancProcessSelect").href = "/Quality/Process/ProcessRevMaintenance/" + aProcessId;
            };
        }
    };
</script>
