@page "{aSpecId:int?}/{aMessage?}/{isMessageGood:bool?}"
@model ArmisWebsite.Pages.ProcessMaintenance.SpecProcessAssignmentModel
@{
    ViewData["Title"] = "SpecProcessAssign";
}

<head>
    <script type="text/javascript" src="~/js/Quality/Specification/SpecProcessAssign.js"></script>

    @if (Model.CurrentSpec == null)
    {
        <script type="text/javascript">
            //Opens Spec model when the page loads
            $(window).on('load', function () {
                $('#modalSpecificationSelect').modal('show');
            });
        </script>
    }

    @if (Model.IsReviewNeededForCurrentSpec)
    {
        <script type="text/javascript">
            $(window).on('load', function () {
                this.document.getElementById("isReviewNeededWarningMessage").hidden = false;
                this.document.getElementById("btnSubmitMainForm").disabled = true;
            });
        </script>
    }
</head>

<div class="container-fluid w-100">
    <h1>Specification-Process Assignment</h1>

    @*Preloaded message.*@
    <p><partial name="/Pages/shared/partials/popupmessagepartial.cshtml" model="Model.Message" /></p>

    @*This message will show up if the current spec selected has spec-process assignments that need to be reviewed.*@
    <div id="isReviewNeededWarningMessage" hidden>
        <div class="row alert alert-danger">
            <h5 class="col-lg-10">This Specification has Spec-Process Assignments that need review</h5>
            <a asp-page="SpecProcessAssignReview" class="btn btn-primary col-lg-2">Go To Review</a>
        </div>
    </div>

    <form method="post" onsubmit="return validate()">
        <div class="row">
            @*Left Side*@
            <div class="col-lg-3">
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modalSpecificationSelect">Find Specification</button>

                <div class="modal fade" id="modalSpecificationSelect">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Choose a Specification</h5>
                            </div>
                            <div class="modal-body">
                                <input class="form-control mb-1" placeholder="Search..." onkeyup="searchSelectList(this.value, 'Specification')" />
                                <select id="selectSpecificationList" class="list-group w-100" size="14">
                                    @foreach (var spec in Model.AllSpecifications)
                                    {
                                        <option class="list-group-item" data-id="@spec.Id" value="@spec.Code" onmousedown="udpateSpecIdOnAnchor(@spec.Id)">
                                            @spec.Code
                                        </option>
                                    }
                                </select>
                                <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                <a id="ancSpecChoiceCommit" class="btn btn-primary my-2" href="">Ok</a>
                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.CurrentSpec != null)
                {
                    <div class="card p-2 my-2">
                        <label>Spec Code</label>
                        <input class="form-control mb-2" value="@Model.CurrentSpec.Code" readonly />
                        <label>Spec Rev</label>
                        <input class="form-control mb-2" value="@Model.CurrentSpecCurrentRev.ExternalRev" readonly />

                        <input type="hidden" asp-for="SpecId" />
                        <input type="hidden" asp-for="SpecInternalRevId" />
                    </div>

                    <div id="divSublevelSection" class="card p-2">
                        @foreach (var sublevel in Model.CurrentSpecCurrentRev.SubLevels)
                        {
                            <div class="border border-light p-1">
                                <h5>@sublevel.Name</h5>
                                @if (sublevel.IsRequired) { <i class="text-danger">Required</i>}
                                @if(sublevel.DefaultChoice != null) { <i>(@sublevel.Choices.FirstOrDefault(i => i.ChoiceSeqId == sublevel.DefaultChoice).Description is default)</i>}
                                <ul style="list-style-type:none;">
                                    @foreach (var choice in sublevel.Choices)
                                    {
                                        <li>
                                            @*If the choice has a step, then it will be an anchor that opens a collapse div containing the step and dependency information*@
                                            @if (choice.ReferenceStepId != null || choice.DependentSubLevelId != null || choice.OnlyValidForChoiceId != null)
                                            {
                                                <a href="#collapseChoiceInformation_@choice.SubLevelSeqId-@choice.ChoiceSeqId" data-toggle="collapse">@choice.Description</a>
                                                
                                                <input id="chkbox_@sublevel.LevelSeq-@choice.ChoiceSeqId" type="checkbox" name="@sublevel.Name" value="@choice.ChoiceSeqId" data-sublevel="@sublevel.LevelSeq" data-choice="@choice.ChoiceSeqId" data-dependent-sublevel="" data-dependent-choice="" onchange="updateChoiceIdInput(this)" />
                                                @*if the choice has dependencies, the following logic will get the names of the depended sublevel and choice to display*@
                                                @if (choice.DependentSubLevelId != null)
                                                {
                                                    var dependedSublevel = Model.CurrentSpec.SpecRevModels.FirstOrDefault().SubLevels.FirstOrDefault(sl => sl.LevelSeq == choice.DependentSubLevelId);
                                                    <span id="spanDependencyText_@sublevel.LevelSeq-@choice.ChoiceSeqId" class="text-danger">
                                                        <i>Dependent on @dependedSublevel.Name</i>

                                                        @if (choice.OnlyValidForChoiceId != null)
                                                        {
                                                            var dependedChoice = dependedSublevel.Choices.FirstOrDefault(c => c.ChoiceSeqId == choice.OnlyValidForChoiceId);
                                                            <i>- @dependedChoice.Description</i>

                                                            <script>
                                                                document.getElementById("chkbox_@sublevel.LevelSeq-@choice.ChoiceSeqId").disabled = true;
                                                                var dependentCheckBox = document.getElementById("chkbox_" + @choice.SubLevelSeqId + "-" + @choice.ChoiceSeqId); //Grabbing the checkbox just created
                                                                dependentCheckBox.dataset.dependentSublevel = @dependedSublevel.LevelSeq;
                                                                dependentCheckBox.dataset.dependentChoice = @dependedChoice.ChoiceSeqId;
                                                            </script>
                                                        }
                                                    </span>
                                                }
                                                <div id="collapseChoiceInformation_@choice.SubLevelSeqId-@choice.ChoiceSeqId" class="collapse">
                                                    @if (choice.ReferenceStepId != null)
                                                    {
                                                        <div class="card p-1">
                                                            <h6>@choice.ReferenceStep.StepName</h6>
                                                            @choice.ReferenceStep.Instructions
                                                        </div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <text>@choice.Description</text>
                                                <input id="chkbox_@sublevel.LevelSeq-@choice.ChoiceSeqId" type="checkbox" name="@sublevel.Name" value="@choice.ChoiceSeqId" data-sublevel="@sublevel.LevelSeq" data-choice="@choice.ChoiceSeqId" data-dependent-sublevel="" data-dependent-choice="" onchange="updateChoiceIdInput(this)" />
                                            }
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                        @* data-has-been-set="0" is for the javascript.  See javascript comment in function updateChoiceIdInput() for more details.
                            The classes are used in the javascript to easily pull all of these fields, they are not used for CSS.
                        *@
                        <input type="hidden" id="hdnChoiceId1" class="hiddenChoiceInput" asp-for="ChoiceId1" data-has-been-set="0" />
                        <input type="hidden" id="hdnChoiceId2" class="hiddenChoiceInput" asp-for="ChoiceId2" data-has-been-set="0" />
                        <input type="hidden" id="hdnChoiceId3" class="hiddenChoiceInput" asp-for="ChoiceId3" data-has-been-set="0" />
                        <input type="hidden" id="hdnChoiceId4" class="hiddenChoiceInput" asp-for="ChoiceId4" data-has-been-set="0" />
                        <input type="hidden" id="hdnChoiceId5" class="hiddenChoiceInput" asp-for="ChoiceId5" data-has-been-set="0" />
                        <input type="hidden" id="hdnChoiceId6" class="hiddenChoiceInput" asp-for="ChoiceId6" data-has-been-set="0" />
                    </div>
                }

            </div>
            @if (Model.CurrentSpec != null)
            {
                @*Middle*@
                <div class="col-lg-4 card h-100 py-3">
                    @*Customer*@
                    <div class=" border border-dark p-2">
                        <label>Customer:</label> <label id="labelCustomer" class="font-weight-bold"></label>
                        <button type="button" class="btn btn-sm btn-primary float-right" data-toggle="modal" data-target="#modalCustomerSelect">Find</button><button type="button" class="btn btn-sm btn-danger float-right mb-1 mx-1" onclick="clearInput('Customer')">Clear</button>

                        <input type="hidden" id="hdnCustomerId" asp-for="CustomerId" />

                        @*@if (Model.CustomerId != null)
                            {<input id="inputCustomer" class="form-control" data-id="@Model.CustomerId" value="@Model.AllCustomers.FirstOrDefault(i => i.CustId == Model.CustomerId).Name" readonly /> }
                            else
                            { <input id="inputCustomer" class="form-control" data-id="" readonly />}*@
                    </div>

                    <div class="modal fade" id="modalCustomerSelect">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Choose a Customer</h5>
                                </div>
                                <div class="modal-body">
                                    <input class="form-control mb-1" placeholder="Search..." onkeyup="searchSelectList(this.value, 'Customer')" />
                                    <select id="selectCustomerList" class="list-group w-100" size="16">
                                        @foreach (var customer in Model.AllCustomers)
                                        {
                                            <option class="list-group-item" data-id="@customer.CustId" value="@customer.CustId. @customer.Name">
                                                @customer.CustId.
                                                @customer.SearchName -
                                                @customer.Name
                                            </option>
                                        }
                                    </select>
                                    <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                    <button type="button" class="btn btn-primary my-2" data-dismiss="modal" onclick="updateInputFromSelectModal('Customer')">Ok</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Process Selection Modal Goes here*@
                    <div class="mt-5">
                        <span id="processValidateAlert" class="text-danger align-self-center" hidden>Please select a process</span>
                        <div id="selectProcessSection" class="border border-dark p-2">
                            <label>Process: </label>
                            <br />
                            <label id="labelProcess" class="font-weight-bold"></label>
                            <br />
                            <div class="text-center"><button type="button" class="btn btn-primary " data-toggle="modal" data-target="#modalProcessSelect">Search Process</button></div>

                            <input type="hidden" id="hdnProcessId" asp-for="ProcessId" value="" />
                            <input type="hidden" id="hdnProcessRevId" asp-for="ProcessRevId" />
                        </div>
                    </div>
                    <div class="modal fade" id="modalProcessSelect">
                        <div class="modal-dialog modal-xl">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Choose a Process</h5>
                                </div>
                                <div class="modal-body">
                                    <div class="row">
                                        <div class="col-lg-8">
                                            <div class="input-group my-1">
                                                <input id="inputProcessSearchFilter" type="text" class="form-control border-right-0" placeholder="Search..." onkeyup="searchProcessList(this.value)" />
                                                <span class="input-group-append bg-white border-left-0">
                                                    <span class="input-group-text bg-transparent"><i class="fa fa-search"></i></span>
                                                </span>
                                            </div>
                                            <select id="selectProcessList" class="list-group w-100" size="12" onchange="updateProcessRevIdInput(this.options[this.selectedIndex].dataset.currentRevId)">
                                                @foreach (var process in Model.AllProcessesWithCurrentRev)
                                                {

                                                    var currentRevId = process.Revisions.OrderByDescending(i => i.ProcessRevId).FirstOrDefault().ProcessRevId;

                                                    <option value="@process.ProcessId. @process.Name" class="list-group-item fa" data-id="@process.ProcessId" data-current-rev-id="@currentRevId" onmouseup="LoadStepModal(@process.ProcessId, `@process.Name`)">
                                                        @process.ProcessId: @process.Name -
                                                        Rev:
                                                        @if (process.Revisions != null && process.Revisions.Any())
                                                        {
                                                            @process.Revisions.Last().ProcessRevId
                                                        }
                                                        else
                                                        {
                                                            <text>NONE</text>
                                                        }
                                                    </option>
                                                }
                                            </select>
                                            <input type="button" class="btn btn-danger" data-dismiss="modal" value="Cancel" />
                                            <input type="button" class="btn btn-primary my-2" data-dismiss="modal" onclick="updateInputFromSelectModal('Process')" value="Ok" />
                                        </div>
                                        <div class="col-lg-4">
                                            <h5 id="modalStepTitle"></h5>
                                            <ul id="modalStepPlaceholder" class="list-group" style="max-height:32em; overflow-y:scroll;">
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Right side*@
                <div class="col-lg-5">
                    <h5 class="justify-content-center">Current Spec-Process Assignments</h5>
                    <div class="input-group my-1">
                        <input id="inputStepSearchFilter" type="text" class="form-control border-right-0" placeholder="Search..." onkeyup="searchCurrentSpaList(this.value)" />
                        <span class="input-group-append bg-white border-left-0">
                            <span class="input-group-text bg-transparent"><i class="fa fa-search"></i></span>
                        </span>
                    </div>
                    <ul id="spaList" class="list-group w-100 border" style="overflow-y:scroll; max-height:40em;">
                        @if (Model.SpecProcessAssignsForCurrentSpec != null)
                        {
                            @foreach (var specProcessAssign in Model.SpecProcessAssignsForCurrentSpec)
                            {
                                <li class="list-group-item" data-process="@specProcessAssign.ProcessRevision.ProcessName">
                                    <a data-toggle="collapse" href="#specProcAssign_@specProcessAssign.SpecId-@specProcessAssign.SpecRevId-@specProcessAssign.SpecAssignId">
                                        @specProcessAssign.SpecAssignId.
                                        Process: <b>@specProcessAssign.ProcessRevision.ProcessId. @specProcessAssign.ProcessRevision.ProcessName</b>
                                        Rev: <b>@specProcessAssign.ProcessRevId </b>
                                        <i class="fa fa-chevron-down rotate"></i>
                                    </a>

                                    <div id="specProcAssign_@specProcessAssign.SpecId-@specProcessAssign.SpecRevId-@specProcessAssign.SpecAssignId" class="row collapse">
                                        <partial name="/Pages/Quality/Specification/Partials/SpecProcessAssignTablePartial.cshtml" model="specProcessAssign" />
                                    </div>
                                </li>
                            }
                        }
                        else
                        {
                            <li class="list-group-item">
                                No Spec-Process Assignments for this Specification
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
        @if (Model.CurrentSpec != null)
        {
            <div class="row">
                <div class="col-lg-3"><a class="btn btn-lg btn-danger mt-3" href="/Quality/Specification/SpecProcessAssign/"><h4>Reset</h4></a></div> @**@
                <div class="col-lg-5"></div>
                <div class="col-lg-4"><button id="btnSubmitMainForm" type="submit" class="btn btn-lg btn-primary mt-3 float-right"><h4>Submit</h4></button></div>
            </div>
        }
    </form>
</div>

<script>
    //This will get all the steps for a process and load them into the process select modal dynamically.  When a process is clicked, the steps are loaded.
    //This needs to be in the HTML so it has access to some information needed from the model
    function LoadStepModal(aProcessId, aProcessName) {
        if (aProcessId > 0) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '@Model._apiAddress' + 'api/processes/GetProcessCurrentHydratedRev/' + aProcessId, true)
            xhr.send();

            xhr.onload = function () {
                var rev = JSON.parse(xhr.responseText);
                var stepItemsHtml = '';
                if (xhr.status == 200) {
                    for (var i = 0; i < rev.StepSeqs.length; i++) {
                        var signOffReqHtml = '';
                        if (rev.StepSeqs[i].Step.SignOffIsRequired == true) {
                            signOffReqHtml = `<p class="text-danger">Sign-Off Required</p>`;
                        }
                        stepItemsHtml +=

                            `<li class="list-group-item">
                                                <a data-toggle="collapse" href="#stepItem` + i + `">` + (i + 1) + ': ' + rev.StepSeqs[i].Step.StepName + ` <i class="fa fa-chevron-down rotate"></i></a>
                                                <div id="stepItem` + i + `" class="collapse">
                                                    <div class="card card-body">`+
                            signOffReqHtml +
                            `<p>` + rev.StepSeqs[i].Step.Instructions + `</p>
                                                    </div>
                                                </div>
                                            </li>`
                    };
                }
                else {
                    stepItemsHtml = 'There are no steps for this process.';
                }

                document.getElementById("modalStepPlaceholder").innerHTML = stepItemsHtml;
                document.getElementById("modalStepTitle").innerHTML = 'Steps for ' + aProcessName.toString();

                activateRotate();
            };
        }
    };
</script>