@page "{aSpecId:int?}/{aMessage?}"
@model ArmisWebsite.Pages.ProcessMaintenance.SpecificationCreationModel
@{
    ViewData["Title"] = "SpecificationCreation";
}

<head>
    <script type="text/javascript" src="~/js/Quality/Specification/SpecificationCreation.js"></script>
</head>
<div class="container-fluid w-75">
    <h1>Specification Maintenance</h1>

    @*Preloaded message.*@
    <p><partial name="/Pages/shared/partials/popupmessagepartial.cshtml" model="Model.Message" /></p>

    @*Placeholder for a spec id only if one is passed in*@
    <input id="hdnCurrentSpecId" form="mainForm" asp-for="CurrentSpecId" value="@Model.CurrentSpecId" hidden />
    @*TODO: If you create a spec and then immediately rev-up, this input won't update unless the value="@Model.CurrentSpecId" is there.  This is redundent.  Not wrong, but not right.*@
    <input id="btnFindSpec" type="button" class="btn btn-primary" data-toggle="modal" data-target="#modalSpecSelect" value="Find Spec" />
    <input id="chkRevUpSelected" type="checkbox" form="mainForm" asp-for="WasRevUpSelected" hidden />

    <div class="modal fade" id="modalSpecSelect">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Choose a Spec</h5>
                </div>
                <div class="modal-body">
                    <div class="input-group my-1">
                        <input id="inputSpecSearch" type="text" class="form-control border-right-0" placeholder="Search..." onkeyup="searchSpecList(this)" />
                        <span class="input-group-append bg-white border-left-0">
                            <span class="input-group-text bg-transparent"><i class="fa fa-search"></i></span>
                        </span>
                    </div>
                    <form method="get">
                        <select id="specList" class="list-group" size="12" asp-for="CurrentSpecId" style="width:100%">
                            @foreach (var spec in Model.AllSpecModels)
                            {
                                @if (spec.SpecRevModels != null && spec.SpecRevModels.Any())
                                {
                                    <option class="list-group-item" value="@spec.Id">
                                        @spec.Code - Rev: [@spec.SpecRevModels.OrderByDescending(i => i.InternalRev).FirstOrDefault().ExternalRev]
                                    </option>
                                }
                                else
                                {
                                    <option class="list-group-item" value="@spec.Id" style="color:red;" disabled>
                                        @spec.Code - Rev: [ERROR : NO REV HAS BEEN ADDED]
                                    </option>
                                }

                            }
                        </select>
                        <button id="btnSelectSpec" class="btn btn-primary my-1">Select</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @*If the CurrentSpecId == 0, then a spec was passed in and the user isnt allowed to change the spec code at all.  The External rev and description cannot be edited unless the user chooses to Rev-Up.*@
    <div class="form-group form-inline">
        <label class="col-lg-2">Spec Code:</label>

        <div class="input-group col-lg-5">
            <input id="inputSpecCode" type="text" class="form-control" form="mainForm" asp-for="SpecCode" onkeydown="return event.key != 'Enter';" maxlength="20" />
            <span id="iconInvalidSpecCode" class="input-group-append bg-white border-left-0" hidden>
                <span class="input-group-text border-danger bg-transparent"><i class="fa fa-times-circle" style="color:red"></i></span>
            </span>
        </div>

        <label class="col-lg-2">External Revision: </label>
        <div class="input-group col-lg-2">
            <input id="inputNewExternalRev" type="text" class="form-control" form="mainForm" asp-for="ExternalRev" onkeydown="return event.key != 'Enter';" maxlength="5" />
            <span id="iconInvalidSpecRev" class="input-group-append bg-white border-left-0" hidden>
                <span class="input-group-text border-danger bg-transparent"><i class="fa fa-times-circle" style="color:red"></i></span>
            </span>
        </div>
        @if (Model.CurrentSpecId != 0)
        {<input id="inputBtnRevUp" type="button" class="btn btn-primary float-lg-right" tabindex="-1" value="Rev-Up" onclick="ApplyRevUpStatus()" />}
    </div>
    <div class="form-group form-inline">
        <label class="col-lg-2">Spec Description: </label>
        <div class="input-group col-lg-10">
            <input id="textAreaSpecDescription" type="text" class="form-control" form="mainForm" asp-for="SpecDescription" onkeydown="return event.key != 'Enter';" maxlength="50" />
            <span id="iconInvalidSpecDesc" class="input-group-append bg-white border-left-0" hidden>
                <span class="input-group-text border-danger bg-transparent"><i class="fa fa-times-circle" style="color:red"></i></span>
            </span>
        </div>
    </div>
    @*TODO: This entire section could be boiled down to one partial that is used 6 times.*@
    <form id="mainForm" method="post" onsubmit="return validateForm()">
        <div class="row">
            @*Sublevel 1*@
            <div class="col-lg-4">
                <div id="cardChoice1" class="card p-3" diabled>
                    <label><b>Sublevel</b> <i id="iconInvalidChoice1" class="fa fa-times-circle" style="color:red" hidden></i><span class="float-right text-muted circle">1</span></label>

                    <input type="text" class="form-control" asp-for="SubLevelName1" onkeydown="return event.key != 'Enter';" maxlength="20" />
                    <p>Is Required? <input type="checkbox" class="form-check-inline" asp-for="IsSubLevelReq1" tabindex="-1" onkeydown="return event.key != 'Enter';" /></p>

                    <label><b>Choice </b><span id="spanDefaultText1" class="text-muted"> (No default selected)</span></label>
                    <div id="choiceInputPlaceholder1" class="card p-1">
                        @if (Model.CurrentSpecId != 0 && Model.ChoiceNames1 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                        {
                            @for (int i = 0; i < Model.ChoiceNames1.Count; i++)
                            {
                                <div id="divChoiceNameGroup1-@i" class="form-inline">
                                    @{int defaultChoiceValue1 = i + 1;}
                                    @if (Model.DefaultChoice1 == defaultChoiceValue1)
                                    {
                                        <input id="chkDefaultChoice1-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice1" tabindex="-1" value="@defaultChoiceValue1" onload="ToggleCheckBoxDisabled(this, 1)" onclick="ToggleCheckBoxes(this, 1)" checked />
                                    }
                                    else
                                    {
                                        <input id="chkDefaultChoice1-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice1" tabindex="-1" value="@defaultChoiceValue1" onclick="ToggleCheckBoxes(this, 1)" />
                                    }

                                    <input id="inputChoice1-@i" type="text" asp-for="ChoiceNames1[i]" data-choice-number="@i" class="form-control col-lg-10" onchange="ToggleCheckBoxDisabled(this, 1);" onkeydown="return event.key != `Enter`;" maxlength="50" />

                                    <a id="iconChoiceDelete1-@i" data-card-number="1" data-choice="@i" onclick="DeleteChoiceInput(this.dataset.cardNumber, this.dataset.choice)">
                                        <i class="fa fa-trash-alt ml-1"></i>
                                    </a>
                                </div>
                            }
                        }
                    </div>
                    <button id="btnAddChoice1" type="button" class="btn btn-outline-secondary" data-card-number="1" onclick="AddChoiceInput(this.dataset.cardNumber)"><i class="fa fa-plus-circle" style="color:#28a745;"></i></button>
                    @if (Model.CurrentSpecId != 0 && Model.ChoiceNames1 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                    { <input id="choiceCount1" type="hidden" value="@Model.ChoiceNames1.Count" /> }
                    else
                    { <input id="choiceCount1" type="hidden" value="0" />}
                    <input id="defaultChoice1" type="text" asp-for="DefaultChoice1" hidden />
                </div>
            </div>

            @*Sublevel 2*@
            <div class="col-lg-4">
                <div id="cardChoice2" class="card p-3">
                    <label><b>Sublevel</b> <i id="iconInvalidChoice2" class="fa fa-times-circle" style="color:red" hidden></i> <span class="float-right text-muted circle">2</span></label>
                    <input type="text" class="form-control" asp-for="SubLevelName2" onkeydown="return event.key != 'Enter';" maxlength="20" />
                    <p>Is Required? <input type="checkbox" class="form-check-inline" asp-for="IsSubLevelReq2" tabindex="-1" onkeydown="return event.key != 'Enter';" /></p>
                    <label><b>Choice </b><span id="spanDefaultText2" class="text-muted"> (No default selected)</span></label>
                    <div id="choiceInputPlaceholder2" class="card p-1">
                        @if (Model.CurrentSpecId != 0 && Model.ChoiceNames2 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                        {
                            @for (int i = 0; i < Model.ChoiceNames2.Count; i++)
                            {
                                <div id="divChoiceNameGroup2-@i" class="form-inline">
                                    @{int defaultChoiceValue2 = i + 1;}
                                    @if (Model.DefaultChoice2 == defaultChoiceValue2)
                                    {<input id="chkDefaultChoice2-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice2" tabindex="-1" value="@defaultChoiceValue2" onclick="ToggleCheckBoxes(this, 2)" checked /> }
                                    else
                                    { <input id="chkDefaultChoice2-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice2" tabindex="-1" value="@defaultChoiceValue2" onclick="ToggleCheckBoxes(this, 2)" />}

                                    <input id="inputChoice2-@i" type="text" asp-for="ChoiceNames2[i]" data-choice-number="@i" class="form-control col-lg-10" onchange="ToggleCheckBoxDisabled(this, 2);" onkeydown="return event.key != `Enter`;" maxlength="50" />

                                    <a id="iconChoiceDelete2-@i" data-card-number="2" data-choice="@i" onclick="DeleteChoiceInput(this.dataset.cardNumber, this.dataset.choice)">
                                        <i class="fa fa-trash-alt ml-1"></i>
                                    </a>
                                </div>
                            }
                        }
                    </div>
                    <button id="btnAddChoice2" type="button" class="btn btn-outline-secondary" data-card-number="2" onclick="AddChoiceInput(this.dataset.cardNumber)"><i class="fa fa-plus-circle" style="color:#28a745;"></i></button>
                    @if (Model.CurrentSpecId != 0 && Model.ChoiceNames2 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                    { <input id="choiceCount2" type="hidden" value="@Model.ChoiceNames2.Count" /> }
                    else
                    { <input id="choiceCount2" type="hidden" value="0" />}
                    <input id="defaultChoice2" type="text" asp-for="DefaultChoice2" hidden />
                </div>
            </div>

            @*Sublevel 3*@
            <div class="col-lg-4">
                <div id="cardChoice3" class="card p-3">
                    <label><b>Sublevel</b> <i id="iconInvalidChoice3" class="fa fa-times-circle" style="color:red" hidden></i> <span class="float-right text-muted circle">3</span></label>
                    <input type="text" class="form-control" asp-for="SubLevelName3" onkeydown="return event.key != 'Enter';" maxlength="20" />
                    <p>Is Required? <input type="checkbox" class="form-check-inline" asp-for="IsSubLevelReq3" tabindex="-1" onkeydown="return event.key != 'Enter';" /></p>
                    <label><b>Choice </b><span id="spanDefaultText3" class="text-muted"> (No default selected)</span></label>
                    <div id="choiceInputPlaceholder3" class="card p-1">
                        @if (Model.CurrentSpecId != 0 && Model.ChoiceNames3 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                        {
                            @for (int i = 0; i < Model.ChoiceNames3.Count; i++)
                            {
                                <div id="divChoiceNameGroup3-@i" class="form-inline">
                                    @{int defaultChoiceValue3 = i + 1;}
                                    @if (Model.DefaultChoice3 == defaultChoiceValue3)
                                    {<input id="chkDefaultChoice3-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice3" tabindex="-1" value="@defaultChoiceValue3" onclick="ToggleCheckBoxes(this, 3)" checked /> }
                                    else
                                    { <input id="chkDefaultChoice3-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice3" tabindex="-1" value="@defaultChoiceValue3" onclick="ToggleCheckBoxes(this, 3)" />}

                                    <input id="inputChoice3-@i" type="text" asp-for="ChoiceNames3[i]" data-choice-number="@i" class="form-control col-lg-10" onchange="ToggleCheckBoxDisabled(this, 3);" onkeydown="return event.key != `Enter`;" maxlength="50" />

                                    <a id="iconChoiceDelete3-@i" data-card-number="3" data-choice="@i" onclick="DeleteChoiceInput(this.dataset.cardNumber, this.dataset.choice)">
                                        <i class="fa fa-trash-alt ml-1"></i>
                                    </a>
                                </div>
                            }
                        }
                    </div>
                    <button id="btnAddChoice3" type="button" class="btn btn-outline-secondary" data-card-number="3" onclick="AddChoiceInput(this.dataset.cardNumber)"><i class="fa fa-plus-circle" style="color:#28a745;"></i></button>
                    @if (Model.CurrentSpecId != 0 && Model.ChoiceNames3 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                    { <input id="choiceCount3" type="hidden" value="@Model.ChoiceNames3.Count" /> }
                    else
                    { <input id="choiceCount3" type="hidden" value="0" />}
                    <input id="defaultChoice3" type="text" asp-for="DefaultChoice3" hidden />
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            @*Sublevel 4*@
            <div class="col-lg-4">
                <div id="cardChoice4" class="card p-3">
                    <label><b>Sublevel</b> <i id="iconInvalidChoice4" class="fa fa-times-circle" style="color:red" hidden></i> <span class="float-right text-muted circle">4</span></label>
                    <input type="text" class="form-control" asp-for="SubLevelName4" onkeydown="return event.key != 'Enter';" maxlength="20" />
                    <p>Is Required? <input type="checkbox" class="form-check-inline" asp-for="IsSubLevelReq4" tabindex="-1" onkeydown="return event.key != 'Enter';" /></p>
                    <label><b>Choice </b><span id="spanDefaultText4" class="text-muted"> (No default selected)</span></label>
                    <div id="choiceInputPlaceholder4" class="card p-1">
                        @if (Model.CurrentSpecId != 0 && Model.ChoiceNames4 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                        {
                            @for (int i = 0; i < Model.ChoiceNames4.Count; i++)
                            {
                                <div id="divChoiceNameGroup4-@i" class="form-inline">
                                    @{int defaultChoiceValue4 = i + 1;}
                                    @if (Model.DefaultChoice4 == defaultChoiceValue4)
                                    {<input id="chkDefaultChoice4-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice4" tabindex="-1" value="@defaultChoiceValue4" onclick="ToggleCheckBoxes(this, 4)" checked /> }
                                    else
                                    { <input id="chkDefaultChoice4-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice4" tabindex="-1" value="@defaultChoiceValue4" onclick="ToggleCheckBoxes(this, 4)" />}

                                    <input id="inputChoice4-@i" type="text" asp-for="ChoiceNames4[i]" data-choice-number="@i" class="form-control col-lg-10" onchange="ToggleCheckBoxDisabled(this, 4);" onkeydown="return event.key != `Enter`;" maxlength="50" />

                                    <a id="iconChoiceDelete4-@i" data-card-number="4" data-choice="@i" onclick="DeleteChoiceInput(this.dataset.cardNumber, this.dataset.choice)">
                                        <i class="fa fa-trash-alt ml-1"></i>
                                    </a>
                                </div>
                            }
                        }
                    </div>
                    <button id="btnAddChoice4" type="button" class="btn btn-outline-secondary" data-card-number="4" onclick="AddChoiceInput(this.dataset.cardNumber)"><i class="fa fa-plus-circle" style="color:#28a745;"></i></button>
                    @if (Model.CurrentSpecId != 0 && Model.ChoiceNames4 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                    { <input id="choiceCount4" type="hidden" value="@Model.ChoiceNames4.Count" /> }
                    else
                    { <input id="choiceCount4" type="hidden" value="0" />}
                    <input id="defaultChoice4" type="text" asp-for="DefaultChoice4" hidden />
                </div>
            </div>

            @*Sublevel 5*@
            <div class="col-lg-4">
                <div id="cardChoice5" class="card p-3">
                    <label><b>Sublevel</b> <i id="iconInvalidChoice5" class="fa fa-times-circle" style="color:red" hidden></i> <span class="float-right text-muted circle">5</span></label>
                    <input type="text" class="form-control" asp-for="SubLevelName5" onkeydown="return event.key != 'Enter';" maxlength="20" />
                    <p>Is Required? <input type="checkbox" class="form-check-inline" asp-for="IsSubLevelReq5" tabindex="-1" onkeydown="return event.key != 'Enter';" /></p>
                    <label><b>Choice </b><span id="spanDefaultText5" class="text-muted"> (No default selected)</span></label>
                    <div id="choiceInputPlaceholder5" class="card p-1">
                        @if (Model.CurrentSpecId != 0 && Model.ChoiceNames5 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                        {
                            @for (int i = 0; i < Model.ChoiceNames5.Count; i++)
                            {
                                <div id="divChoiceNameGroup5-@i" class="form-inline">
                                    @{int defaultChoiceValue5 = i + 1;}
                                    @if (Model.DefaultChoice5 == defaultChoiceValue5)
                                    {<input id="chkDefaultChoice5-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice5" tabindex="-1" value="@defaultChoiceValue5" onclick="ToggleCheckBoxes(this, 5)" checked /> }
                                    else
                                    { <input id="chkDefaultChoice5-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice5" tabindex="-1" value="@defaultChoiceValue5" onclick="ToggleCheckBoxes(this, 5)" />}

                                    <input id="inputChoice5-@i" type="text" asp-for="ChoiceNames5[i]" data-choice-number="@i" class="form-control col-lg-10" onchange="ToggleCheckBoxDisabled(this, 5);" onkeydown="return event.key != `Enter`;" maxlength="50" />

                                    <a id="iconChoiceDelete5-@i" data-card-number="5" data-choice="@i" onclick="DeleteChoiceInput(this.dataset.cardNumber, this.dataset.choice)">
                                        <i class="fa fa-trash-alt ml-1"></i>
                                    </a>
                                </div>
                            }
                        }
                    </div>
                    <button id="btnAddChoice5" type="button" class="btn btn-outline-secondary" data-card-number="5" onclick="AddChoiceInput(this.dataset.cardNumber)"><i class="fa fa-plus-circle" style="color:#28a745;"></i></button>
                    @if (Model.CurrentSpecId != 0 && Model.ChoiceNames5 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                    { <input id="choiceCount5" type="hidden" value="@Model.ChoiceNames5.Count" /> }
                    else
                    { <input id="choiceCount5" type="hidden" value="0" />}
                    <input id="defaultChoice5" type="text" asp-for="DefaultChoice5" hidden />
                </div>
            </div>

            @*Sublevel 6*@
            <div class="col-lg-4">
                <div id="cardChoice6" class="card p-3">
                    <label><b>Sublevel</b> <i id="iconInvalidChoice6" class="fa fa-times-circle" style="color:red" hidden></i> <span class="float-right text-muted circle">6</span></label>
                    <input type="text" class="form-control" asp-for="SubLevelName6" onkeydown="return event.key != 'Enter';" maxlength="20" />
                    <p>Is Required? <input type="checkbox" class="form-check-inline" asp-for="IsSubLevelReq6" tabindex="-1" keydown="return event.key != 'Enter';" /></p>
                    <label><b>Choice </b><span id="spanDefaultText6" class="text-muted"> (No default selected)</span></label>
                    <div id="choiceInputPlaceholder6" class="card p-1">
                        @if (Model.CurrentSpecId != 0 && Model.ChoiceNames6 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                        {
                            @for (int i = 0; i < Model.ChoiceNames6.Count; i++)
                            {
                                <div id="divChoiceNameGroup6-@i" class="form-inline">
                                    @{int defaultChoiceValue6 = i + 1;}
                                    @if (Model.DefaultChoice6 == defaultChoiceValue6)
                                    {<input id="chkDefaultChoice6-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice6" tabindex="-1" value="@defaultChoiceValue6" onclick="ToggleCheckBoxes(this, 6)" checked /> }
                                    else
                                    { <input id="chkDefaultChoice6-@i" title="Default" type="checkbox" class="mx-1" name="chkBoxGroupDefaultChoice6" tabindex="-1" value="@defaultChoiceValue6" onclick="ToggleCheckBoxes(this, 6)" />}

                                    <input id="inputChoice6-@i" type="text" asp-for="ChoiceNames6[i]" data-choice-number="@i" class="form-control col-lg-10" onchange="ToggleCheckBoxDisabled(this, 6);" onkeydown="return event.key != `Enter`;" maxlength="50" />

                                    <a id="iconChoiceDelete6-@i" data-card-number="6" data-choice="@i" onclick="DeleteChoiceInput(this.dataset.cardNumber, this.dataset.choice)">
                                        <i class="fa fa-trash-alt ml-1"></i>
                                    </a>
                                </div>
                            }
                        }
                    </div>
                    <button id="btnAddChoice6" type="button" class="btn btn-outline-secondary" data-card-number="6" onclick="AddChoiceInput(this.dataset.cardNumber)"><i class="fa fa-plus-circle" style="color:#28a745;"></i></button>
                    @if (Model.CurrentSpecId != 0 && Model.ChoiceNames6 != null)@*If a spec was passed in to get reved-up, CurrentSpecId != 0*@
                    { <input id="choiceCount6" type="hidden" value="@Model.ChoiceNames6.Count" /> }
                    else
                    { <input id="choiceCount6" type="hidden" value="0" />}
                    <input id="defaultChoice6" type="text" asp-for="DefaultChoice6" hidden />
                </div>
            </div>
        </div>

        <a class="btn btn-lg btn-primary text-light my-2" onclick="validateMainPage()">Ok</a>
        <a id="btnClearPage" class="btn btn-lg btn-danger text-light mt-1" href="~/Quality/Specification/SpecificationCreation">Reset</a>

        @*Sample Plan Selection Modal*@
        <div class="modal fade" id="modalSamplePlan">
            <div class="modal-dialog modal-lg" style="max-width:90%">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Sample Plan</h5>
                    </div>
                    <div class="modal-body">
                        @*Search Bar*@
                        <div class="input-group my-1">
                            <input class="form-control border-right-0" placeholder="Search..." onkeyup="searchSamplePlanList(this.value)" />
                            <span class="input-group-append bg-white border-left-0">
                                <span class="input-group-text bg-transparent"><i class="fa fa-search"></i></span>
                            </span>
                        </div>

                        <div class="card">


                            <ul id="listAllSamplePlans" class="list-group" style="height:42em; overflow-y:scroll;">
                                <li class="list-group-item"><input type="radio" asp-for="SamplePlanId" value="0" />NONE</li>
                                @foreach (var samplePlan in Model.AllSamplePlans)
                                {
                                    <li class="list-group-item" data-sample-plan-name="@samplePlan.Description">
                                        <input id="radioSamplePlan-@samplePlan.SamplePlanId" type="radio" value="@samplePlan.SamplePlanId" asp-for="SamplePlanId" />
                                        <a href="#samplePlanDetails-@samplePlan.SamplePlanId" data-toggle="collapse">@samplePlan.PlanName - @samplePlan.Description</a>
                                        <div id="samplePlanDetails-@samplePlan.SamplePlanId" class="card collapse">
                                            <table class="table table-bordered table-striped table-hover">
                                                <tr>
                                                    <td class="text-center" style="border-bottom-color:black"><u><b>From</b></u></td>
                                                    <td class="text-center" style="border-right-color:black; border-bottom-color:black"><u><b>To</b></u></td>
                                                    @if (samplePlan.SamplePlanLevelModels.Any())
                                                    {
                                                        var testLevelList = samplePlan.SamplePlanLevelModels.ToList();
                                                        var firstLevelTests = testLevelList[0].SamplePlanRejectModels;

                                                        @foreach (var test in firstLevelTests)
                                                        {
                                                            <td class="text-center" style="border-bottom-color:black"><u><b>@test.InspectionTestType.TestCode Sample</b></u></td>
                                                            <td class="text-center" style="border-right-color:black; border-bottom-color:black"><u><b>@test.InspectionTestType.TestCode Reject</b></u></td>
                                                        }

                                                    }
                                                </tr>
                                                @foreach (var level in samplePlan.SamplePlanLevelModels)
                                                {
                                                    <tr>
                                                        <td>@level.FromQty</td>
                                                        <td style="border-right-color:black">
                                                            @if (level.ToQty == int.MaxValue)
                                                            {<text>OVER</text> }
                                                        else
                                                        { <text>@level.ToQty</text>}
                                                        </td>
                                                        @foreach (var test in level.SamplePlanRejectModels)
                                                        {
                                                            <td class="text-center">@test.SampleQty</td>
                                                            <td class="text-center" style="border-right-color:black">@test.RejectAllowQty</td>
                                                        }
                                                    </tr>
                                                }
                                            </table>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                        <button class="btn btn-success my-2">Submit</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>
@*This needs to be here because it will only execute based on the C# condition below.*@
@if (Model.CurrentSpecId != 0)
{
    <script>
        function UpdateDefaultChoiceSpanOnPageLoad() {
            for (var i = 0; i < 6; i++) { //Go through each of the 6 cards
                var divChoiceSectionItems = document.getElementById("choiceInputPlaceholder" + (i + 1)).children;

                for (var s = 0; s < divChoiceSectionItems.length; s++) { //Go through each row of choice name divs that contains the choice name input, isDault checkbox, and the icon to delete
                    var divChoiceRowItems = divChoiceSectionItems[s].children;

                    for (var r = 0; r < divChoiceRowItems.length; r++) {
                        if (divChoiceRowItems[r].type == "text") {
                            ToggleCheckBoxDisabled(divChoiceRowItems[r], (i + 1));
                        }
                    }
                }

            }
        }

        window.onload = UpdateDefaultChoiceSpanOnPageLoad();

        function DisablePage() {
            var allInputElements = document.body.getElementsByTagName("input");
            for (var i = 0; i < allInputElements.length; i++) {
                //Ignore the Rev-Up button (which is actually an input of type button) getting disabled.
                //Also ignore Find Spec button, and spec search input.
                if (allInputElements[i].id != "inputBtnRevUp" && allInputElements[i].id != "btnFindSpec" && allInputElements[i].id != "hdnCurrentSpecId" && allInputElements[i].id != "inputSpecSearch") { allInputElements[i].disabled = true; }
            }

            var allAnchorElements = document.body.getElementsByTagName("a");
            for (var i = 0; i < allAnchorElements.length; i++) {
                //Ignore all anchors that have either "navbar-brand" or "nav-link text-dark" as class names. These classes are only used in the layout navigation bar in the header.
                //Also ignore the clear button on the bottom of the page.
                if (allAnchorElements[i].classList != "nav-link" && allAnchorElements[i].classList != "navbar-brand" && allAnchorElements[i].classList != "nav-link text-dark" && allAnchorElements[i].id != "btnClearPage") { allAnchorElements[i].hidden = true; }
            }

            var allButtonElements = document.body.getElementsByTagName("button");
            for (var i = 0; i < allButtonElements.length; i++) {
                //Ignore the select button in the modal for finding a spec
                if (allButtonElements[i].id != "btnSelectSpec") {
                    if (allButtonElements[i].id.startsWith("btnAddChoice")) {
                        allButtonElements[i].hidden = true;
                    }
                    else {
                        allButtonElements[i].disabled = true;
                    }
                }
            }
        }

        window.onload = DisablePage();

    </script>
}
