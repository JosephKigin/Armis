@page "{handler?}"
@model ArmisWebsite.ProcessRevMaintenanceModel
@{
    ViewData["Title"] = "Process Maintenance";
}

<head>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script> @*Sortable JS*@
    <link href="~/lib/fontawesome-free-5.12.0-web/css/all.min.css" rel="stylesheet" /> @*FontAwesome*@
</head>
<body>
    <h1>Process Rev Maintenance</h1>

    @*Buttons on the top of the screen*@
    <a class="btn btn-danger" href="ProcessRevMaintenance">Clear</a>
    <button class="btn btn-primary" id="btnFindProcessModal" data-toggle="modal" data-target="#modalProcessSelect">Find Process</button>

    @*Modal for selecting a process to work on*@
    <div class="modal fade" id="modalProcessSelect">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Choose a Process To Edit</h5>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-lg">
                            <form method="get">
                                <select class="list-group" size="12" asp-for="CurrentProcessId">
                                    @foreach (var process in Model.AllProcesses)
                                    {
                                        <option value="@process.ProcessId" class="list-group-item" onmouseup="LoadStepModal(@process.ProcessId, `@process.Name`)">
                                            @process.Name -
                                            Rev:
                                            @if (process.Revisions != null && process.Revisions.Any())
                                            {
                                                @process.Revisions.Last().ProcessRevId
                                                if (process.Revisions.Last().RevStatusCd == "UNLOCKED")
                                                {
                                                    @process.Revisions.Last().RevStatusCd
                                                }
                                            }
                                            else
                                            {
                                                <p>NONE</p> @*Tags aren't supposed to be in the <option> tag so it doesn't render the <p> tag, but it is the only way to escape the c# code.*@
                                            }
                                        </option>
                                    }
                                </select>
                                <button class="btn btn-primary my-2">Ok</button>
                            </form>
                        </div>
                        <div class="col-lg">
                            <h5 id="modalStepTitle"></h5>
                            <ul id="modalStepPlaceholder" class="list-group">
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @*Main section that displays information about the current Process and the current Revision.*@
    <div class="row">
        <div class="col-lg-4">
            <h3>Process Details</h3>
            <form method="post">
                <div class="card card-body">
                    <h5><b>Process ID: </b></h5><input asp-for="CurrentProcessId" class="form-control" type="number" readonly />
                    <h5><b>Name: </b>@Model.CurrentProcess.Name</h5>
                    <h5><b>Customer: </b>@Model.CurrentProcess.CustId</h5>
                    @if (Model.CurrentRev != null)
                    {
                        <h5><b>Current Rev: </b></h5><input asp-for="CurrentRevId" class="form-control" type="number" readonly />
                        <h5><b>Status: </b>@Model.CurrentRev.RevStatusCd</h5>
                    }
                    else
                    {
                        <h5><b>Current Rev: </b>NONE</h5>
                    }
                    <h5><b>Comment: </b></h5>
                    <textarea class="form-control" readonly>@Model.CurrentRev.Comments</textarea>
                </div>

                <div class="card card-body">
                    @*
                        There are 4 different buttons total: Rev Up, Lock, Save, and Delete.  If there is no process loaded on the page, they are all disabled.  If there is a process loaded where
                        the current revision is locked or there is no revision, then Rev Up is enabled and everything else is disabled.  If the current revision is unlocked, Rev Up is disabled and
                        everything else is enabled.
                        TODO: This could be cleaned up by having one of each button (instead of 3 sets of buttons) and then executing a javascript function in the if conditions that would handle changing the buttons based on what is needed.
                    *@
                    @if ((Model.CurrentRev.RevStatusCd == "LOCKED") || (Model.CurrentProcessId != 0 && Model.CurrentRev.ProcessRevId == 0))
                    {
                        <input type="button" class="btn btn-primary m-1" data-toggle="modal" data-target="#modalRevUpComment" value="Rev Up" />
                        <button type="submit" class="btn btn-outline-secondary m-1" disabled>Lock</button>
                        <button type="submit" class="btn btn-outline-secondary m-1" disabled>Save</button>
                        <button type="submit" class="btn btn-outline-secondary m-1" asp-page-handler="Delete" disabled>Delete</button>
                    }
                    else if (Model.CurrentRev.RevStatusCd == "UNLOCKED")
                    {
                        <input type="button" data-toggle="modal" data-target="#modalRevUpComment" class="btn btn-outline-secondary m-1" disabled value="Rev Up" />
                        <button type="submit" class="btn btn-primary m-1">Lock</button>
                        <button type="submit" class="btn btn-primary m-1">Save</button>
                        <button type="submit" class="btn btn-danger m-1" asp-page-handler="Delete">Delete</button>
                    }
                    else
                    {
                        <input type="button" data-toggle="modal" data-target="#modalRevUpComment" class="btn btn-outline-secondary m-1" disabled value="Rev Up" />
                        <button type="submit" class="btn btn-outline-secondary m-1" disabled>Lock</button>
                        <button type="submit" class="btn btn-outline-secondary m-1" disabled>Save</button>
                        <button type="submit" class="btn btn-outline-secondary m-1" asp-page-handler="Delete" disabled>Delete</button>
                    }
                </div>
            </form>

            @*Modal for Rev Up for the user to add in a comment and their employee number.*@
            <div class="modal fade" id="modalRevUpComment">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Additional Details</h5>
                        </div>
                        <div class="modal-body">
                            <form method="post">
                                <input asp-for="CurrentProcessId" hidden />
                                <div class="form-group">
                                    <label><b>Comment:</b></label>
                                    <input id="txtRevUpComment" class="form-control" asp-for="Comment" autocomplete="off" onkeyup="validateRevUpCommentEmp()" />
                                </div>
                                <div class="form-group">
                                    @*TODO: delete this once Azure AD Login is implemented.*@
                                    <label><b>Employee Number:</b></label>
                                    <input id="numRevUpEmp" class="form-control" type="number" asp-for="EmpNumber" onkeyup="validateRevUpCommentEmp()" />
                                    <span id="spanEmpNumeberWarning" class="alert-danger" hidden>Not a valid Employee Number</span>
                                </div>
                                <button id="btnRevUpCommentEmp" type="submit" class="btn btn-primary m-1" asp-page-handler="RevUp" disabled>Rev Up</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @*Loads a display with the current steps in a sortable list as well as a "trash" list to get rid of steps.  The list will only be sortable is the current Rev is unlocked.*@
        <div class="col-lg-4">
            @if (Model.CurrentProcessId != 0 && Model.CurrentRev.ProcessRevId != 0)
            {

                var borderColor = "grey";
                if (Model.CurrentRev.RevStatusCd == "UNLOCKED")
                {
                    borderColor = "green";
                }

                @*Operation List*@
                <div class="row">
                    <h5 class="col-lg">Operations</h5> @if (Model.CurrentRev.RevStatusCd == "UNLOCKED")
                    {<input type="button" class="mb-1 mr-3 btn-sm btn-primary col-lg" data-toggle="modal" data-target="#modalOperationSelect" value="Add" />}
                </div>
                <div class="p-3" style="border:dashed black">
                    <select class="list-group" id="currentOperations" asp-for="CurrentOperationIds">
                        @foreach (var operation in Model.CurrentOperations)
                        {
                            <option class="list-group-item">
                                @operation.Name
                            </option>
                        }
                    </select>
                </div>

                @*Operation selection modal*@
                <div class="modal fade" id="modalOperationSelect">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Operation(s) Select</h5>
                                <span class="text-info">*Hold the [ctrl] key to select multiple</span>
                            </div>
                            <div class="modal-body">
                                @*<form method="get" asp-page-handler="UpdateOperations">*@
                                <ul id="selectAllOperations" class="list-group w-100" size="12" multiple>
                                    @foreach (var operation in Model.AllOperations)
                                    {
                                        <li id="operation-@operation.Id" value="@operation.Id" class="list-group-item">
                                            @operation.Name
                                        </li>
                                    }
                                </ul>
                                <button class="btn btn-primary my-2" data-dismiss="modal" onclick="addToCurrentOperations()">Ok</button>
                                @*</form>*@
                            </div>
                        </div>
                    </div>
                </div>

                @*Current step list.  If the revision is "UNLCOKED", the border will be green and the list will be sortable.  If the current revision is "LOCKED", the border will be grey and the list will be unsortable.  If there is no current revision, the list will not show up.*@
                <h5>Current Steps</h5>
                <div class="p-3" style="border:dashed @borderColor;">
                    <ul id="sortableCurrentSteps" class="list-group" style="max-height:42em; overflow-y:scroll;">

                        @foreach (var step in Model.CurrentRev.Steps)
                        {
                            <li class="list-group-item" id="currentStep-@step.StepId">
                                <h5>
                                    <i class="fa fa-arrows-alt handle"></i>
                                    <a data-toggle="collapse" href="#currentStepDetails-@step.StepId">@step.StepName [@step.Operation.Code]</a>
                                </h5>
                                <div id="currentStepDetails-@step.StepId" class="collapse">
                                    <div class="card card-body">
                                        @if (step.SignOffIsRequired == true)
                                        {<p class="text-danger">Sign-Off Required</p>}
                                        <p><b>Instructions: </b>@step.Instructions</p>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>

                @*Creates a sortable trash that deletes anything dropped into it.  There is also a chunk of script for making the current steps and all steps lists sortable.  The reason it is here is because these are all the sortable events that happen when an "UNLOCKED" revision is selected.*@
                @if (Model.CurrentRev.RevStatusCd == "UNLOCKED")
                {
                    <div id="sortableTrash" class="mt-3" style="width:inherit; height:80px; border:dashed red; text-align:center;">
                        <i class="fas fa-trash" style="color:red;"></i>
                    </div>
                    <script>
                        new Sortable(sortableTrash,
                            {
                                group: {
                                    name: 'steps'
                                },
                                onAdd: function (evt) {
                                    var el = evt.item;
                                    el.parentNode.removeChild(evt.item);
                                }
                            });

                        new Sortable(sortableCurrentSteps,
                            {
                                group: {
                                    name: 'steps'
                                },
                                handle: '.handle',
                                animation: 150,
                                ghostClass: 'bg-warning'
                            });
                    </script>
                }
            }
        </div>

        @*Loads a list of all the steps that can be dragged into the current steps.  This will only load if the current Rev is unlocked.*@
        <div class="col-lg-4">
            @if (Model.CurrentRev != null)
            {
                @if (Model.CurrentRev.RevStatusCd == "UNLOCKED")
                {
                    <h5>All Steps</h5>
                    <ul id="sortableAllSteps" class="list-group" style="max-height:42em; overflow:scroll;">
                        @foreach (var step in Model.AllSteps)
                        {
                            <li class="list-group-item" id="allStep-@step.StepId">
                                <h5>
                                    <i class="fa fa-arrows-alt handle"></i>
                                    <a data-toggle="collapse" href="#allStepDetails-@step.StepId">@step.StepName</a>
                                </h5>
                                <div id="allStepDetails-@step.StepId" class="collapse">
                                    <div class="card card-body">
                                        @if (step.SignOffIsRequired == true)
                                        {<p class="text-danger">Sign-Off Required</p>}
                                        <b>Instructions: </b>@step.Instructions
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>

                    <script>
                        new Sortable(sortableAllSteps,
                            {
                                group: {
                                    name: 'steps',
                                    pull: 'clone'
                                },
                                handle: '.handle',
                                animation: 150,
                                ghostClass: 'bg-warning',
                                sort: false,
                                onAdd: function (evt) {
                                    var el = evt.item;
                                    el.parentNode.removeChild(evt.item);
                                }
                            });
                    </script>
                }
            }

        </div>
    </div>

    @*Preloaded message.  The message can be set to a success or danger based on what IsMessageGood is set to.*@
    <partial name="/Pages/shared/partials/popupmessagepartial.cshtml" model="Model.PopUpMessage" />

</body>

<script>
 //TODO:This is the same code that is in Process Listing. See if this can be put into its own file and pulled into each of these htmls.
    //This will get all the steps for a process and load them into the process select modal dynamically.  When a process is clicked, the steps are loaded.
    function LoadStepModal(aProcessId, aProcessName) {
        if (aProcessId > 0) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '@Model._apiAddress' + 'api/processes/GetHydratedProcessRevision/' + aProcessId, true)
            xhr.send();

            xhr.onload = function () {
                var rev = JSON.parse(xhr.responseText);
                console.log(rev);
                var stepItemsHtml = '';
                if (xhr.status == 200) {
                    for (var i = 0; i < rev.Steps.length; i++) {
                        var signOffReqHtml = '';
                        if (rev.Steps[i].SignOffIsRequired == true) {
                            signOffReqHtml = `<p class="text-danger">Sign-Off Required</p>`;
                        }
                        stepItemsHtml +=

                            `<li class="list-group-item">
                                                <a data-toggle="collapse" href="#stepItem` + i + `">` + rev.Steps[i].StepName + `</a>
                                                <div id="stepItem` + i + `" class="collapse">
                                                    <div class="card card-body">`+
                            signOffReqHtml +
                            `<p>` + rev.Steps[i].Instructions + `</p>
                                                    </div>
                                                </div>
                                            </li>`
                    };
                }
                else {
                    stepItemsHtml = 'There are no steps for this process.';
                }

                document.getElementById("modalStepPlaceholder").innerHTML = stepItemsHtml;
                document.getElementById("modalStepTitle").innerHTML = 'Steps for ' + aProcessName.toString();
            };
        }
    };

    //Validation for the Rev Up Modal
    function validateRevUpCommentEmp() {
        var txtComment = document.getElementById("txtRevUpComment");
        var numEmp = document.getElementById("numRevUpEmp"); //TODO: delete this once Azure AD Login is implemented.
        var empNumWarning = document.getElementById("spanEmpNumeberWarning");
        var btnRevUp = document.getElementById("btnRevUpCommentEmp");

        if (txtComment.value.length >= 1 && numEmp.value > 0) {
            //TODO: delete this once Azure AD Login is implemented.
            //Sets up the connection to the employee controller in the API and fires off the request.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '@Model._apiAddress' + 'api/employee/CheckIfEmployeeNumberExists/' + numEmp.value, true)
            xhr.send();

            //When the request loads, checks if the employee number exists.  If it does, the span displaying the validation message disappears and the rev up button is enabled.  If the employee number does not exist, the validation span is displayed and the rev up button is disabled.
            xhr.onload = function () {
                if (xhr.status == 200) {
                    var empNumExists = JSON.parse(xhr.responseText);
                    console.log(empNumExists);
                    if (empNumExists == true) {
                        btnRevUp.disabled = false;
                        empNumWarning.hidden = true;
                    }
                    else {
                        empNumWarning.hidden = false;
                    }
                }
            };

        }
        else {
            btnRevUp.disabled = true;
            empNumWarning.hidden = true;
        }
    };

    function addToCurrentOperations() {
        var selectOperationsOptions = document.getElementById("selectAllOperations").options;
        var currentOperations = document.getElementById("currentOperations");

        for (var i = 0; i < selectOperationsOptions.length; i++) {
            if (selectOperationsOptions[i].selected == true) {
                console.log(selectOperationsOptions[i].value)
                currentOperations.innerHTML +=
                    `<option id="` + selectOperationsOptions[i].id + `" value="` + selectOperationsOptions[i].value + `" class="list-group-item">` + selectOperationsOptions[i].innerHTML + `</option>`;
            }
        };
    }
</script>
