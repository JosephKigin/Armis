@page "{aProcessId:int?}/{aMessage?}"
@model ArmisWebsite.ProcessRevMaintenanceModel
@{
    ViewData["Title"] = "Process Maintenance";
}

<head>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <link href="~/lib/fontawesome-free-5.12.0-web/css/all.min.css" rel="stylesheet" />

    <script>

    </script>

</head>
<body>
    <h1>Process Rev Maintenance</h1> <a class="btn btn-danger" href="ProcessRevMaintenance">Clear</a>

    <button class="btn btn-primary" id="btnFindProcessModal" data-toggle="modal" data-target="#modalProcessSelect">Find Process</button>

    <div class="modal fade" id="modalProcessSelect">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Choose a Process Revision To Edit</h5>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-lg-6">
                                <form method="get">
                                    <select class="list-group" size="12" asp-for="CurrentProcessId">
                                        @foreach (var process in Model.AllProcesses)
                                        {
                                            <option value="@process.ProcessId" class="list-group-item" onmouseup="LoadStepModal(@process.ProcessId, `@process.Name`)">
                                                @process.Name -
                                                Rev: @process.Revisions.OrderByDescending(i => i.ProcessRevId).FirstOrDefault().ProcessRevId
                                                @if (process.Revisions.OrderByDescending(i => i.ProcessRevId).FirstOrDefault().RevStatusCd == "UNLOCKED")
                                                {@process.Revisions.OrderByDescending(i => i.ProcessRevId).FirstOrDefault().RevStatusCd}
                                            </option>
                                        }
                                    </select>
                                    <button class="btn btn-primary my-2">Ok</button>
                                </form>
                            </div>
                            <div class="col-lg-6">
                                <h5 id="modalStepTitle"></h5>
                                <ul id="modalStepPlaceholder" class="list-group">

                                </ul>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-4">
            <h3>Process Details</h3>
            <div class="card card-body">
                <h5><b>Name: </b>@Model.CurrentProcess.Name</h5>
                <h5><b>Customer: </b>@Model.CurrentProcess.CustId</h5>
                <h5><b>Current Rev: </b>@Model.CurrentRev.ProcessRevId</h5>
                <h5><b>Status: </b>@Model.CurrentRev.RevStatusCd</h5>
            </div>

            <div class="card card-body">
                @{
                    var btnRevUpDisable = "disabled";
                    var btnRevUpClasses = "btn btn-outline-secondary m-1";

                    var btnLockDisable = "disabled";
                    var btnLockClasses = "btn btn-outline-secondary m-1";

                    var btnSaveDisable = "disabled";
                    var btnSaveClasses = "btn btn-outline-secondary m-1";

                    var btnDeleteDisable = "disabled";
                    var btnDeleteClasses = "btn btn-outline-secondary m-1";

                    if (Model.CurrentRev.RevStatusCd == "LOCKED")
                    {
                        btnRevUpDisable = "";
                        btnRevUpClasses = "btn btn-primary m-1";
                    }
                    if (Model.CurrentRev.RevStatusCd == "UNLOCKED")
                    {
                        btnLockDisable = "";
                        btnLockClasses = "btn btn-primary m-1";
                        btnSaveDisable = "";
                        btnSaveClasses = "btn btn-primary m-1";
                        btnDeleteDisable = "";
                        btnDeleteClasses = "btn btn-danger m-1";
                    }
                }

                <button type="submit" class="@btnRevUpClasses" @btnRevUpDisable>Rev Up</button>
                <button type="submit" class="@btnLockClasses" @btnLockDisable>Lock</button>
                <button type="submit" class="@btnSaveClasses" @btnSaveDisable>Save</button>
                <button type="submit" class="@btnDeleteClasses" @btnDeleteDisable>Delete</button>
            </div>
        </div>

        <div class="col-lg-4">
            @if (Model.CurrentRev.Steps.Any())
            {
                <partial name="Partials/CurrentStepsPartial" model="Model.CurrentRev" />
            }
        </div>

        <div class="col-lg-4">
            @if (Model.CurrentRev.RevStatusCd == "UNLOCKED")
            {
                <partial name="Partials/AllStepsPartial" model="Model.AllSteps" />
            }
        </div>
    </div>
</body>

<script>
    function LoadStepModal(aProcessId, aProcessName) {
        if (aProcessId > 0) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', 'https://localhost:44316/api/processes/GetHydratedProcessRevision/' + aProcessId, true) //TODO:!!!!!!!!!!!!!!!!!!!!!Move this to config!!!!!!!!!!!!!!!!!!!!!!!!
            xhr.send();

            xhr.onload = function () {
                var rev = JSON.parse(xhr.responseText);
                console.log(rev);
                var stepItemsHtml = '';
                for (var i = 0; i < rev.Steps.length; i++) {
                    var signOffReqHtml = '';
                    if (rev.Steps[i].SignOffIsRequired == true) {
                        signOffReqHtml = `<p class="text-danger">Sign-Off Required</p>`;
                    }
                    stepItemsHtml +=

                        `<li class="list-group-item">
                                                <a data-toggle="collapse" href="#stepItem` + i + `">` + rev.Steps[i].StepName + `</a>
                                                <div id="stepItem` + i + `" class="collapse">
                                                    <div class="card card-body">`+
                        signOffReqHtml +
                        `<p>` + rev.Steps[i].Instructions + `</p>
                                                    </div>
                                                </div>
                                            </li>`
                };

                document.getElementById("modalStepPlaceholder").innerHTML = stepItemsHtml;
                document.getElementById("modalStepTitle").innerHTML = aProcessName.toString();
            };
        }
    };

    new Sortable(sortableAllSteps,
        {
            group: {
                name: 'steps',
                pull: 'clone'
            },
            handle: '.handle',
            animation: 150,
            ghostClass: 'bg-warning',
            sort: false,
            onAdd: function (evt) {
                var el = evt.item;
                el.parentNode.removeChild(evt.item);
            }
        });

    new Sortable(sortableCurrentSteps,
        {
            group: {
                name: 'steps'
            },
            handle: '.handle',
            animation: 150,
            ghostClass: 'bg-warning'
        });

    new Sortable(sortableTrash,
        {
            group: {
                name: 'steps'
            },
            onAdd: function (evt) {
                var el = evt.item;
                el.parentNode.removeChild(evt.item);
            }
        });
</script>