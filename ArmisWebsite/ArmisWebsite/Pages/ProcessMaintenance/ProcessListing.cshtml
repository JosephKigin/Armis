@page
@model ArmisWebsite.ProcessListingModel
@{
    ViewData["Title"] = "ProcessListing";
}

<head>
    <link href="~/lib/fontawesome-free-5.12.0-web/css/all.min.css" rel="stylesheet" />
</head>

<h1 class="my-2">Process Listing</h1>
@if (Model.PdfPath != null)
{
    <div class="my-3">
        <span class="alert alert-success">
            Your PDF was created at:
            <span id="pdfPath">@Model.PdfPath</span>
            <button id="btnOpenPdf" onclick="openPdfInNewTab()">Open</button>
        </span>
    </div>
}


<div id="stepList">
    <div class="row">
        <div class="col-lg-6">
            @*Search bar*@
            <div class="input-group my-1">
                <input id="searchProcesses" class="form-control border-right-0" placeholder="Search..." onkeyup="searchProcessList()" />
                <span class="input-group-append bg-white border-left-0">
                    <span class="input-group-text bg-transparent"><i class="fa fa-search"></i></span>
                </span>
            </div>
            @*Process list*@
            <form method="post">
                <select id="processList" class="list-group w-100" asp-for="ProcessIdSelection" size="12" style="overflow:scroll;">
                    @foreach (var process in Model.Processes)
                    {
                        <option class="list-group-item" id="process-@process.ProcessId" value="@process.ProcessId" onmousedown="loadSteps(@process.ProcessId, '@process.Name'); togglePrintButton()">
                            @process.ProcessId: @process.Name
                            (Rev:
                            @if (process.Revisions != null && process.Revisions.Any() && process.Revisions.FirstOrDefault(i => i.RevStatusCd == "LOCKED") != null)
                            {
                                @process.Revisions.FirstOrDefault(i => i.RevStatusCd == "LOCKED").ProcessRevId
                            }
                            else
                            {
                                <p>No Locked Revs</p> @*tags aren't supposed to be in the <option> tag, so it doesn't actually render the <p> tag, but it is the only way to escape the c# code.*@
                            })
                        </option>
                    }
                </select>
                <button id="btnPrint" class="btn btn-primary my-1" asp-page-handler="Print" disabled>Print</button>
            </form>

        </div>
        @*This is where the steps will be loaded*@
        <div class="col-lg-6">
            <h5 id="stepTitle"></h5>
            <ul id="stepsPlaceholder" class="list-group" style="max-height:36em; overflow:scroll;">
            </ul>
        </div>

    </div>
</div>

@*Pop up message*@
<partial name="/Pages/shared/partials/popupmessagepartial.cshtml" model="Model.PopUpMessage" />

<script>
    function searchProcessList() {
        var searchTerm = document.getElementById("searchProcesses").value.toUpperCase();
        var processList = document.getElementById("processList");
        var processListItems = processList.getElementsByTagName("option");

        for (var i = 0; i < processListItems.length; i++) {
            if (!processListItems[i].textContent.toUpperCase().includes(searchTerm)) {
                processListItems[i].style.display = "none";
            }
            else {
                processListItems[i].style.display = "block";
            }
        }
    }

    //TODO:This is the same code that is in Process Rev Maintenance. See if this can be put into its own file and pulled into each of these htmls.
    function loadSteps(aProcessId, aProcessName) {
        if (aProcessId > 0) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', '@Model._apiAddress' + 'api/processes/GetHydratedProcessRevision/' + aProcessId, true);
            xhr.send();

            xhr.onload = function () {

                var rev = JSON.parse(xhr.responseText);
                var stepItemsHtml = '';
                if (xhr.status != 404) {
                    if (rev.StepSeqs.length > 0) {
                        for (var i = 0; i < rev.StepSeqs.length; i++) {
                            var signOffReqHtml = '';
                            if (rev.StepSeqs[i].Step.SignOffIsRequired == true) {
                                signOffReqHtml = `<p class="text-danger">Sign-Off Required</p>`;
                            }
                            stepItemsHtml +=

                                `<li class="list-group-item">
                                                <a data-toggle="collapse" href="#stepItem` + i + `">` + rev.StepSeqs[i].Step.StepName + `</a>
                                                <div id="stepItem` + i + `" class="collapse">
                                                    <div class="card card-body">`+
                                signOffReqHtml +
                                `<p>` + rev.StepSeqs[i].Step.Instructions + `</p>
                                                    </div>
                                                </div>
                                            </li>`
                        };
                    }
                    else {
                        stepItemsHtml = 'There are no steps in the current revision.'
                    }

                }
                else {
                    stepItemsHtml = 'There are no revisions for this process.'
                }
                document.getElementById("stepsPlaceholder").innerHTML = stepItemsHtml;
                document.getElementById("stepTitle").innerHTML = aProcessName.toString();

            }
        }
    }

    function togglePrintButton() {
        document.getElementById("btnPrint").disabled = false;
    }

    function openPdfInNewTab() {
        var pdfPath = document.getElementById("pdfPath").innerHTML;
        window.open(pdfPath);
    }
</script>